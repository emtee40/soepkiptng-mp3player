#!/usr/bin/perl
############################################################################
# soepkiptng (c) copyright 2000 Eric Lammerts <eric@lammerts.org>.
############################################################################
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2, as 
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# A copy of the GNU General Public License is available on the World Wide Web
# at `http://www.gnu.org/copyleft/gpl.html'.  You can also obtain it by
# writing to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
############################################################################

my $progdir;
BEGIN {
	use Cwd qw'abs_path cwd';

	# find program directory
	$_ = $0;
	while(-l) {
		my $l = readlink or die "readlink $_: $!\n";
		if($l =~ m|^/|) { $_ = $l; } else { s|[^/]*$|/$l|; }
	}
	m|(.*)/|;
	$progdir = abs_path($1);

	unshift @INC, "$progdir/lib";
}
require "$progdir/soepkiptng.lib";
$ENV{PATH} = "$progdir/bin:$ENV{PATH}";

use integer;
use DBI;
use Getopt::Std;
use MP3::Tag;
#use Data::Dumper;

use vars qw/$opt_r $opt_h $opt_q $opt_t $opt_l $opt_c $opt_f $opt_1 $opt_s $opt_A $opt_R $opt_S/;

sub do_dir($$) {
	my ($dbh, $f) = @_;

	$opt_r or return;
	$f = abs_path($f);
	$f =~ s|/+$||;
	my $q = "SELECT filename,artist.name as artist,album.name as album, language FROM song" .
		" LEFT JOIN artist ON artist.id=song.artist_id" .
		" LEFT JOIN album ON album.id=song.album_id" .
		" LEFT JOIN lyrics ON lyrics.id=song.id" .
		" WHERE song.artist_id=artist.id AND song.album_id=album.id" .
		" AND present AND filename LIKE ?";
	my $sth = $dbh->prepare($q);
	$sth->execute("$f/%")
		or die "can't do sql command: " . $dbh->errstr;

	my $album;
	my $artist;
	my %language;
	my @files;
	while($_ = $sth->fetchrow_hashref) {
		(my $dir = $_->{filename}) =~ s|^(.*)/[^/]+$|\1|;
		next unless $dir eq $f;		# skip files in subdirs
		if(!$opt_A) {
			if($artist && $artist ne $_->{artist}) {
				warn "$f: No common artist name found.\n";
				return;
			}
			$artist = $_->{artist};
		}
		if($album && $album ne $_->{album}) {
			warn "$f: No common album name found.\n";
			return;
		}
		$language{$_->{language}} = 1;
		$album = $_->{album};
		push @files, $_->{filename};
	}
	my ($language) = (keys %language == 1)? keys %language : ();
	$sth->finish;
	my $newname = "";
	$newname .= string_to_filename($artist, $language);
	$newname .= "-" if $artist && $album;
	$newname .= string_to_filename($album, $language);
	$newname =~ s/--+/-/;
	if($opt_S) {
		$newname = cwd . "/$newname";
	} else {
		$f =~ m|^(.*)/|;
		$newname = "$1/$newname";
	}

	if($f eq $newname) {
	} elsif(-e $newname) {
		warn "$f: $newname exists, skipping\n";
	} else {
		warn "renaming $f -> $newname\n";
		if(rename $f, $newname) {
			foreach(@files) {
				(my $fnew = $_) =~ s|.*/|$newname/|;
				
				$dbh->do("DELETE FROM song WHERE filename=?",
					undef, $fnew)
					or die "can't do sql command: " . $dbh->errstr;
				$dbh->do("UPDATE song SET filename=? WHERE filename=?",
					undef, $fnew, $_)
					or die "can't do sql command: " . $dbh->errstr;
			}
		} else {
			warn "rename $f -> $newname: $!\n";
		}
	}
}

sub do_file($$) {
	my ($dbh, $f) = @_;
	my ($id, $ti, $ar, $al, $tr, $len, $lyrics, $description, $language, $uuid);

	$f =~ s|^\./+||;

	my $full_filename = $f;
	$full_filename =~ m|/| or $full_filename = "./$f";	# prepend ./ if relative path
	$full_filename =~ s|(.*)/|abs_path($1) . "/"|e;		# get absolute pathname

	my $filename_noext = $full_filename;
	$filename_noext =~ s/\\/\\\\/g;	# escape \
	$filename_noext =~ s/_/\\_/g;	# and _
	$filename_noext =~ s/%/\\%/g;	# and %

	my $sth = $dbh->prepare(
		"SELECT song.id,title,artist.name,album.name,track,length," .
		"lyrics,language,description,uuid FROM song " .
		"LEFT JOIN album ON album.id=song.album_id " .
		"LEFT JOIN artist ON artist.id=song.artist_id " . 
		"LEFT JOIN lyrics ON lyrics.id=song.id " .
		"WHERE present AND filename LIKE ? ORDER BY track");

	my $partial = 0;
	for(;;) {
		$sth->execute($filename_noext)
			or die "can't do sql command: " . $dbh->errstr;
		($id, $ti, $ar, $al, $tr, $len, $lyrics, $language, $description, $uuid) =
			$sth->fetchrow_array and last;

		$partial++;
		if($partial == 1) {
			# replace extension by .% wildcard
			$filename_noext =~ s|\.[^/.]+$|.%|;
		} else {
			# replace first pathname component by %/
			$filename_noext =~ s|^%?/+[^/]+/+|%/| or do {
				warn "$f: not found in dbase\n" unless $opt_q;
				return 1;
			};
		}
	}
	$sth->finish;
	$partial and warn "$f: partial filename match on $filename_noext\n" unless $opt_q;

	next unless -s $f;

	if($opt_s) {
		do_soepkip($dbh, $f, $ar, $ti, $al, $tr, $len, $lyrics, $description, $language, $uuid);
	} elsif($f =~ /\.mp[123]$/i) {
		do_mp3($dbh, $f, $ar, $ti, $al, $tr, $len, $lyrics, $description, $language, $uuid);
	} elsif($f =~ /\.flac$/i) {
		do_flac($dbh, $f, $ar, $ti, $al, $tr, $len);
	} elsif($f =~ /\.ogg$/i) {
		do_ogg($dbh, $f, $ar, $ti, $al, $tr, $len);
	} else {
		warn "unknown file type: $f\n";
	}

	if($opt_r) {
		my $ext = "";
		$f =~ /.*\.(.*?)$/ and $ext = lc($1);
		my $newname = "";
		if($opt_D) {
			$newname .= string_to_filename($ar, $language) . "-" if $ar;
			$newname .= string_to_filename($al);
			mkdir $newname;
			$newname .= "/";
		}
		$newname .= sprintf "%02d-", $tr if $tr;
		$newname .= string_to_filename($ar, $language) . "-" if $ar;
		$newname .= string_to_filename($ti);
		$newname =~ s/--+/-/;
		#$newname = sprintf "%02d - ", $tr if $tr; $newname .= "$ar - $ti"; $newname =~ s/([\x80-\xff])/lc($latin9_to_ascii{ord($1)}) || $1/ge;
		if($opt_l && length("$newname.$ext") > $opt_l) {
			$newname = substr($newname, 0, $opt_l - length(".$ext") - 1);
			$newname =~ s/_?$/_/;
		}
		$newname .= ".$ext";
		$full_filename =~ m|^(.*)/|;
		$newname = "$1/$newname";

		if($newname ne $full_filename) {
			warn "renaming $full_filename -> $newname\n";
			if(-e $newname) {
				warn "$f: $newname exists, skipping\n";
			} elsif(!$opt_t) {
				if(rename $full_filename, $newname) {
					if(!$partial) {
						$dbh->do("DELETE FROM song WHERE filename=?",
							undef, $newname)
							or die "can't do sql command: " . $dbh->errstr;
						$dbh->do("UPDATE song SET filename=? WHERE id=?",
							undef, $newname, $id)
							or die "can't do sql command: " . $dbh->errstr;
					}
				} else {
					warn "rename $full_filename -> $newname: $!\n";
				}
			}
		}
	}
	return 1;
}

sub do_soepkip($$$$$$$$$) {
	my ($dbh, $f, $ar, $ti, $al, $tr, $len, $lyrics, $lyrdesc, $lyrlang, $uuid) = @_;
	local *IN, *OUT;
	my $dir = ".";
	$f =~ s|(.*)/+|| and $dir = $1;

	open OUT, ">$dir/.soepkiptng_info.tmp"
		or do { warn "$dir/.soepkiptng_info.tmp: $!\n"; return undef; };
	print OUT <<EOF;
[$f]
artist=$ar
title=$ti
album=$al
track=$tr

EOF
	if(open IN, "$dir/.soepkiptng_info") {
		my $skip = 0;
		while(<IN>) {
			if(/^\[([^\]]+)\]/) { $skip = $1 eq $f; }
			print OUT unless $skip;
		}
		close IN;
	}
	if(!rename "$dir/.soepkiptng_info.tmp", "$dir/.soepkiptng_info") {
		warn "rename $dir/.soepkiptng_info.tmp -> $dir/.soepkiptng_info: $!\n";
		unlink "$dir/.soepkiptng_info.tmp"
			or warn "$dir/.soepkiptng_info.tmp: $!\n";
		return undef;
	}
	return 1;
}

sub do_mp3($$$$$$$$$) {
	my ($dbh, $f, $ar, $ti, $al, $tr, $len, $lyrics, $lyrdesc, $lyrlang, $uuid) = @_;

	if(!$opt_1) {
		local *F;
		open F, "+<$f" or do {
			warn "$f: $!\n";
			return 1;
		};
		for(;;) {
			my $buf;

			seek F, -128, 2;
			read F, $buf, 128;
			$buf =~ /^TAG/ or last;
			warn "$f: removed ID3 tag\n";
			seek F, -128, 2;
			truncate F, tell F or warn "truncate $f: $!\n"
				unless $opt_t;
			last if $opt_t;
		}
		close F;
	}

	$mp3 = MP3::Tag->new($f) or die "$f: $!\n";
	$mp3->config("autoinfo", "ID3v2");
	my ($p_ti, $p_tr, $p_ar, $p_al) = $mp3->autoinfo();
	my $p_uslt;
	my ($p_ufidname, $p_uuid);
	my $p_len = 0;
	my $newtag = $mp3->{ID3v2};
	if(defined($newtag)) {
		$newtag->remove_frame('TIT2');
		$newtag->remove_frame('TPE1');
		$newtag->remove_frame('TALB');
		$newtag->remove_frame('TRCK');
		$p_len = $mp3->{ID3v2}->getFrame('TLEN');
		$newtag->remove_frame('TLEN');
		$p_uslt = $mp3->{ID3v2}->getFrame('USLT');
		$newtag->remove_frame('USLT');
		($p_ufid) = $mp3->{ID3v2}->getFrame('UFID');
		if($p_ufid->{Text} eq "UUID") { $p_uuid = $p_ufid->{_Data}; }
		$newtag->remove_frame('UFID');
		#warn Dumper($p_uslt);
	} else {
		$newtag = $mp3->newTag('ID3v2');
	}
	$p_uslt->{Text} =~ s/\s+$//;
	$lyrics =~ s/\s+$//;
	if($opt_f || $p_ti ne $ti || $p_tr != $tr || $p_ar ne $ar || $p_al ne $al ||
		$p_len != 1000 * $len || $p_uslt->{Description} ne $lyrdesc || 
		($lyrics && $p_uslt->{Language} ne $lyrlang) ||
		$p_uslt->{Text} ne $lyrics || $p_uuid ne $uuid) {

		$newtag->add_frame('TIT2', $ti) if $ti;
		$newtag->add_frame('TPE1', $ar) if $ar;
		$newtag->add_frame('TALB', $al) if $al;
		$newtag->add_frame('TRCK', $tr) if $tr;
		if($len) {
			$newtag->add_frame('TLEN', 1000 * $len);
		}
		if($lyrics) {
			$newtag->add_frame('USLT', 0, $lyrlang, $lyrdesc, $lyrics);
		}
		if($uuid) {
			$newtag->add_frame('UFID', "UUID", $uuid);
		}
		warn "$f: updating ID3v2 tag\n";
		$newtag->write_tag()
			unless $opt_t;
	}
	if($opt_1) {
		$ti =~ s/^(.{29}).{2,}/$1_/;
		$ar =~ s/^(.{29}).{2,}/$1_/;
		$al =~ s/^(.{29}).{2,}/$1_/;
		my $id3v1 = $mp3->{ID3v1};
		if(defined($id3v1)) {
			if($id3v1->song eq $ti &&
			   $id3v1->artist eq $ar &&
			   $id3v1->album eq $al &&
			   $id3v1->track == $tr) { $id3v1 = undef; }
		} else {
			$id3v1 = $mp3->newTag('ID3v1');
		}
		if(defined($id3v1)) {
			$id3v1->song($ti);
			$id3v1->artist($ar);
			$id3v1->album($al);
			$id3v1->track($tr);
			warn "$f: updating ID3 tag\n";
			$id3v1->writeTag;
		}
	}
	return 1;
}

sub do_ogg($$$$$$$) {
	my ($dbh, $f, $ar, $ti, $al, $tr, $len) = @_;
	local *FR;
	local *FW;

	# read current tags & see what needs to be changed
	if(open(FR, "-|") == 0) {
		exec "vorbiscomment", "-ql", $f;
		die "vorbiscomment";
	}
	my $oldtag;
	while(<FR>) {
		s/\s+$//;
		/^(\w+)=(.*)/ and $oldtag{$1} = $2;
	}
	close FR;

	return 1 if !$opt_f && $oldtag{artist} eq $ar && $oldtag{title} eq $ti && $oldtag{album} eq $al && $oldtag{tracknumber} == $tr;

	warn "$f: updating vorbis comments\n";
	return 1 if $opt_t;

	if(open(FR, "-|") == 0) {
		exec "vorbiscomment", "-ql", $f;
		die "vorbiscomment";
	}
	if(open(FW, "|-") == 0) {
		exec "vorbiscomment", "-qw", $f;
		die "vorbiscomment";
	}
	# print new info
	print FW <<EOF;
artist=$ar
title=$ti
album=$al
tracknumber=$tr
EOF
	# copy other tags verbatim
	while(<FR>) {
		next if /^(artist|title|album|tracknumber)=/;
		print FW $_;
	}
	close FR;
	close FW;
	return 1;
}

sub do_flac($$$$$$$) {
	my ($dbh, $f, $ar, $ti, $al, $tr, $len) = @_;
	local *F;

	# read current tags & see what needs to be changed
	my @changeargs = ();
	if(open(F, "-|") == 0) {
		exec "metaflac", "--export-tags-to=-", $f;
		die "metaflac";
	}
	my %oldtag;
	while(<F>) {
		s/\s+$//;
		/^(\w+)=(.*)/ and $oldtag{$1} = $2;
	}
	close F;
	if($opt_f || $oldtag{artist} ne $ar) { push @changeargs, "--remove-tag=artist", "--set-tag=artist=$ar"; }
	if($opt_f || $oldtag{title} ne $ti)  { push @changeargs, "--remove-tag=title", "--set-tag=title=$ti"; }
	if($opt_f || $oldtag{album} ne $al)  { push @changeargs, "--remove-tag=album", "--set-tag=album=$al"; }
	if($opt_f || $oldtag{tracknumber} != $tr) { push @changeargs, "--remove-tag=tracknumber", "--set-tag=tracknumber=$tr"; }

	# change it
	if(@changeargs) {
		warn "$f: updating vorbis comments\n";
		if(!$opt_t) { system "metaflac", @changeargs, $f; }
	}
	return 1;
}


getopts('rfhqtl:c:1sADS');

read_configfile(\%conf, $opt_c);

($prog = $0) =~ s|.*/||;
if($opt_h || !@ARGV) {
	print <<EOF;
Usage: $prog [-hrqfts] [-l len] mp3files...

Options: 
       -r      : rename files.
       -q      : don't warn about partial/failed filename matches.
       -f      : force tag writing
       -t      : testmode, don't actually write any tags.
       -l len  : restrict length of filenames to 'len'
       -1      : also write ID3 tag
       -s      : write to .soepkiptng_info instead of file

$prog reads Artist/Title/Album/Track info from the SoepkipTNG
database and writes it to the specified files using ID3v2 (unless the files
already have ID3v2 tags containing the exact same info). All ID3v1 tags are
removed.

If the -r switch is used, the files are renamed to a standard format:
track-artist-title.mp3 (if there is a track number) or artist-title.mp3
(if there is no track number).
* track consists of two or more digits.
* artist may contain only alphanumeric characters and underscores.
* title may contain only alphanumeric characters, underscores and dashes.

EOF
	exit;
}

$| = 1;

my $dbh = DBI->connect("DBI:$conf{'db_type'}:$conf{'db_name'}:$conf{'db_host'}",
	$conf{'db_user'}, $conf{'db_pass'})
	or die "can't connect to database";

foreach $f (@ARGV) {
	if(-d $f) {
		do_dir($dbh, $f);
	} elsif(-s _) {
		do_file($dbh, $f);
	}
}

$dbh->disconnect();
