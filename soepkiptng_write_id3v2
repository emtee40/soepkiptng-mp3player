#!/usr/bin/perl
############################################################################
# soepkiptng (c) copyright 2000 Eric Lammerts <eric@lammerts.org>.
# $Id$
############################################################################
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# A copy of the GNU General Public License is available on the World Wide Web
# at `http://www.gnu.org/copyleft/gpl.html'.  You can also obtain it by
# writing to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
############################################################################

# CONFIG

$configfile = "/etc/soepkiptng.conf";

use Getopt::Std;
use integer;
use Cwd;
use DBI;
use MP3::Tag;

use vars qw/$opt_r $opt_h/;

%latin1_to_ascii = (
	192 => "A", 193 => "A", 194 => "A", 195 => "A", 196 => "A", 197 => "A",
	198 => "AE", 199 => "C", 200 => "E", 201 => "E", 202 => "E", 203 => "E",
	204 => "I", 205 => "I", 206 => "I", 207 => "I", 209 => "N", 210 => "O",
	211 => "O", 212 => "O", 213 => "O", 214 => "O", 215 => "x", 216 => "O",
	217 => "U", 218 => "U", 219 => "U", 220 => "U", 221 => "Y", 223 => "ss",
	224 => "a", 225 => "a", 226 => "a", 227 => "a", 228 => "a", 229 => "a",
	230 => "ae", 231 => "c", 232 => "e", 233 => "e", 234 => "e", 235 => "e",
	236 => "i", 237 => "i", 238 => "i", 239 => "i", 241 => "n", 242 => "o",
	243 => "o", 244 => "o", 245 => "o", 246 => "o", 248 => "o", 249 => "u",
	250 => "u", 251 => "u", 252 => "u", 253 => "y", 255 => "y",
);

sub simplify($) {
	my ($a) = @_;

	$a =~ s/-/_/g;
	$a =~ s/\((.*)/-\1/;
	$a =~ s/[ _]?&[_ ]?/_and_/;
	$a =~ s/([\xc0-\xff])/lc($latin1_to_ascii{ord($1)}) || $1/ge;
	$a =~ s/[^-A-Za-z0-9]+/_/g;
	$a =~ s/_?-_?/-/g;
	$a =~ s/_$//;
	return lc($a);
};

getopts('rh');

($prog = $0) =~ s|.*/||;
if($opt_h || !@ARGV) {
	print <<EOF;
Usage: $prog [-r] mp3files...

$prog reads Artist/Title/Album/Track info from the SoepkipTNG
database and writes it to the specified files using ID3v2 (unless the files
already have ID3v2 tags containing the exact same info). All ID3v1 tags are
removed.

If the -r switch is used, the files are renamed to a standard format:
track-artist-title.mp3 (if there is a track number) or artist-title.mp3
(if there is no track number).
* track consists of two or more digits.
* artist may contain only alphanumeric characters and underscores.
* title may contain only alphanumeric characters, underscores and dashes.

EOF
	exit;
}

$cwd = cwd;

open F, $configfile or die "$configfile: $!\n";
while(<F>) {
	/^#/ and next;
	s/\s+$//;
	/./ or next;
	if(/^(\w+)\s*=\s*(.*?)\s*$/) {
		$f = $1;
		$conf{$f} = $2;
	} elsif(/^\s+(.*?)\s*$/) {
		# continuation line
		$conf{$f} .= "\n$1";
	} else {
		die "$configfile line $.: invalid format\n";
	}
}
close F;

$ENV{'PATH'} = "$conf{'progdir'}/bin:$ENV{'PATH'}";
require "$conf{'progdir'}/soepkiptng.lib";

$| = 1;

$dbh = DBI->connect("DBI:$conf{'db_type'}:$conf{'db_name'}:$conf{'db_host'}",
	$conf{'db_user'}, $conf{'db_pass'})
	or die "can't connect to database";

foreach $f (@ARGV) {
	next if -d $f;
	$f =~ s|^\./+||;

	my $fullf = $f;
	$f =~ m|^/| or $fullf = "$cwd/$f";

	$q = "SELECT song.id,title,artist.name,album.name,track" .
	     " FROM song,artist,album" .
	     " WHERE song.artist_id=artist.id AND song.album_id=album.id" .
	     " AND present AND filename=?";
	$sth = $dbh->prepare($q);
	$sth->execute($fullf)
		or die "can't do sql command: " . $dbh->errstr;

	($id, $ti, $ar, $al, $tr) = $sth->fetchrow_array or do {
		my $shortf = $fullf;
		$shortf =~ s|.*/|%/|;

		$q = "SELECT song.id,title,artist.name,album.name,track" .
		     " FROM song,artist,album" .
		     " WHERE song.artist_id=artist.id AND song.album_id=album.id" .
		     " AND present AND filename LIKE ?";
		$sth = $dbh->prepare($q);
		$sth->execute($shortf)
			or die "can't do sql command: " . $dbh->errstr;
	
		($id, $ti, $ar, $al, $tr) = $sth->fetchrow_array or do {
			warn "$f: not found in dbase\n";
			next;
		};
		warn "$f: partial filename match on $shortf\n";
	};

	open F, "+<$f" or do {
		warn "$f: $!\n";
		next;
	};
	for(;;) {
		seek F, -128, 2;
		read F, $buf, 128;
		$buf =~ /^TAG/ or last;
		warn "$f: removed ID3 tag\n";
		seek F, -128, 2;
		truncate F, tell F or warn "truncate $f: $!\n";
	}
	close F;

	$mp3 = MP3::Tag->new($f) or die "$f: $!\n";
	$mp3->config("autoinfo", "ID3v2");
	($p_ti, $p_tr, $p_ar, $p_al) = $mp3->autoinfo();
	
	if($p_ti ne $ti || $p_tr != $tr || $p_ar ne $ar || $p_al ne $al) {
		$newtag = $mp3->newTag('ID3v2');
		$newtag->add_frame('TIT2', $ti) if $ti;
		$newtag->add_frame('TPE1', $ar) if $ar;
		$newtag->add_frame('TALB', $al) if $al;
		$newtag->add_frame('TRCK', $tr) if $tr;
		warn "$f: updating ID3v2 tag\n";
		$newtag->write_tag();
	}

	if($opt_r) {
		my $ext = "";
		$f =~ /.*\.(.*?)$/ and $ext = lc($1);
		my $newname = "";
		$newname .= sprintf "%02d-", $tr if $tr;
		$newname .= simplify($ar) . "-" if $ar;
		$newname .= simplify($ti) . ".$ext";
		$fullf =~ m|^(.*)/|;
		$newname = "$1/$newname";

		if($newname ne $fullf) {
			warn "renaming $fullf -> $newname\n";
			if(-e $newname) {
				warn "$f: $newname exists, skipping\n";
			} else {
				if(rename $fullf, $newname) {
					$dbh->do("DELETE FROM song WHERE filename=?",
						undef, $newname)
						or die "can't do sql command: " . $dbh->errstr;
					$dbh->do("UPDATE song SET filename=? WHERE id=?",
						undef, $newname, $id)
						or die "can't do sql command: " . $dbh->errstr;
				} else {
					warn "rename $fullf -> $newname: $!\n";
				}
			}
		}
	}
}

