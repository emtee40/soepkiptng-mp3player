#!/usr/bin/perl

############################################################################
# soepkiptng (c) copyright 2000 Eric Lammerts <eric@lammerts.org>.
# $Id: soepkiptng_console,v 1.1 2003/10/04 11:10:07 eric Exp $
############################################################################
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2, as 
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# A copy of the GNU General Public License is available on the World Wide Web
# at `http://www.gnu.org/copyleft/gpl.html'.  You can also obtain it by
# writing to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
############################################################################

use integer;
use Cwd 'abs_path';
use Getopt::Std;
use IO::Socket;
use Term::ReadKey;

# find program directory
$_ = $0;
while(-l) {
	my $l = readlink or die "readlink $_: $!\n";
	if($l =~ m|^/|) { $_ = $l; } else { s|[^/]*$|/$l|; }
}
m|(.*)/|;
my $progdir = abs_path($1);

require "$progdir/soepkiptng.lib";

our $opt_p = 6600;
getopts('c:p:');

read_configfile(\%conf, $opt_c);

my $lsock = IO::Socket::INET->new(Proto => "tcp", LocalPort => $opt_p, ReuseAddr => 1, Listen => 5)
	or die "cannot open listening socket on port $opt_p: $!\n";

for(;;) {
	my $sock = $lsock->accept or do {
		sleep 1;
		next;
	};
	if(fork == 0) {
		$sock->print("OK MPD 0.1.0\n");
		while(<$sock>) {
			if(/^status/) {
				$sock->print(soepkip_status());
				$sock->print("OK\n");
			} elsif(/^currentsong/) {
				$sock->print(soepkip_currentsong());
				$sock->print("OK\n");
			} else {
				$sock->print("ACK [5@0] {} unknown command \"bla\"\n");
			}
		}
		exit;
	}
}

sub get_statusfile {
	open F, $conf{statusfile} or return;
	chop(my @f = <F>);
	close F;
	return @f;
}

sub get_status($) {
	my $host = shift @_;

	my $s = IO::Socket::INET->new("$host:2222") or return;
	$_ = <$s>;
	$s->print("status\n");
	$_ = <$s>;
	$s->close;
	/\brunning=(\d+)\b.*\bsong=(\d+)\b.*\btime=(\d+)\b/ or return;
	return ($1, $2, $3);
}

sub soepkip_status {
	my (undef, $filename, undef, undef, $host, undef, undef, undef, $ar, $t, $al, $tr, $len) = get_statusfile();
	my ($running, $songno, $time) = get_status($host);
	$running = $running? "play" : "pause";
	return <<EOF;
repeat: 0   
random: 0   
single: 0   
consume: 0  
playlist: 0
playlistlength: 1
xfade: 0    
state: $running
time: $time:$len
EOF
}

sub soepkip_currentsong {
	my (undef, $filename, undef, undef, $host, undef, undef, undef, $ar, $t, $al, $tr, $len) = get_statusfile();
	$filename =~ s|.*/||;
	return <<EOF;
file: $filename
Time: $len
Artist: $ar
Title: $t
Album: $al
Track: $tr
EOF
}
