#!/usr/bin/perl
# $Id$

$configfile = "/etc/soepkiptng.conf";

use DBI;
use MPEG::MP3Info;

$force = 1 if $ARGV[0] eq "force";
$| = 1;

# for the web interface (stupid browsers/users)
$SIG{'PIPE'} = 'IGNORE';

open F, $configfile
	or die "$configfile: $!\n";
while(<F>) {
	/^#/ and next;
	s/\s+$//;
	/./ or next;
	if(/^(\w+)\s*=\s*(.*?)\s*$/) {
		$f = $1;
		${$f} = $2;
	} elsif(/^\s+(.*?)\s*$/) {
		# continuation line
		${$f} .= "\n$1";
	} else {
		die "$configfile line $.: invalid format\n";
	}
}
close F;

require "$progdir/soepkiptng.lib";

foreach(split /\s+/, $formats) {
	$extensions{$_} = 1;
}

sub unsimplify {
	my ($s) = @_;
	$s =~ s/_/ /g;
	$s =~ s/(^|\b)(\S)/\U\2/g;
	$s =~ s/n T\b/n't/g;
	$s =~ s/ S\b/'s/g;
	$s =~ s/\bI M\b/I'm/g;
	$s =~ s/ ll\b/'ll/ig;
	$s =~ s/\b(i+)\b/\U\1/ig;
	$s =~ s/([eiuy]) ([rv]e)\b/\1'\L\2/ig;
	$s =~ s/-/ - /g;
	$s;
}

sub extract_artist_title {
	my ($f) = @_;
	my ($a, $t, $tr, $alb);

	$f =~ s|(.*)/||;
	my $p = $1;
	$f =~ s/\s*$//;
	$f =~ s/^\s*(\d{0,2})\W*//;	# nummer weg, max 2 digits
	$tr = $1;

	$p =~ s|/+$||;
	$p =~ s|.*/||;

	if($f =~ /\s*-\s*/) {
		($a, $t) = ($`, $');
		($alb = $p) =~ s/.*-//;
	} else {
		$p =~ s/-(.*)// and $alb = $1;
		($a, $t) = ($p, $f);
	}
	return (unsimplify($a), unsimplify($t), $tr, $alb);
}

foreach $file (split /\s+/, $description_files) {
	open ALB, $file or die;
	while(<ALB>) {
		/\S/ or do { $artist = $album = $dirname = ""; next; };
		/^artist\s*(.*?)\s*$/ and do { $artist = $1; next; };
		/^title\s*(.*?)\s*$/ and do { $album = $1; next; };
		if(/^dirname\s+(.*\S)/) {
			my $realartist;

			$dirname = $1;
			($artist_s = $dirname) =~ s/-.*//;
			while(<ALB>) {
				/^##\s*(.*\S)/ and do {
					$realartist = $1;
					next;
				};
				if(s/^track\s+(\S+)\.mp3\s*//) {
					$a = $1;
					$filename = $1;
					$a =~ s/^(\d+)-([^-]+)-.*/\2/;
					$tracknr{"$dirname/$filename"} = $1;
#warn "a=$a artist_s=$artist_s artist=$artist realartist=$realartist\n";
					if($realartist) {
						$artist{"$dirname/$filename"} = $realartist;
						$realartist = undef;
					} elsif($a eq $artist_s) {
						$artist{"$dirname/$filename"} = $artist;
					} else {
						$a =~ s/_/ /g;
						$a =~ s/\b(\w)/\U\1/g;
						$artist{"$dirname/$filename"} = $a;
					}
					s/\s*$//;
					if(!$_) {
						$_ = $filename;
						s/^\d+-([^-]+)-//;
						s/_/ /g;
						s/\b(\w)/\U\1/g; 
					}
					$track{"$dirname/$filename"} = $_;
#print qq~\$track{"$dirname/$filename"} = $_;\n~ if /magic/i;
#print STDERR "$dirname/$filename $album\n";
				}
				$album{"$dirname/$filename"} = $album;
				last unless /\S/;
			}
		}
	}
	close ALB;
}

$table_name = "songs";
$dbh = DBI->connect("DBI:$db_type:$db_name:$db_host", $db_user, $db_pass)
	or die "can't connect to database";



$sth = $dbh->prepare("SELECT filename FROM songs");
$sth->execute();
while(($_) = $sth->fetchrow_array) {
	$filename{$_} = 1;
}

open FILES, "find $mp3dirs -follow -type f -print0|";
$/ = "\0";
while(<FILES>) {
	chop;
#	if(++$num % 10 == 0) { print STDERR "."; }
	s/\.(\w+)$// or next;
	$ext = $1;
	$extensions{lc($ext)} or next;
	if($filename{"$_.$ext"}) {
		delete $filename{"$_.$ext"};
		if($force) {
			print "Updating $_.$ext\n";
			$num_updated++;
		} else {
			$num_skipped++;
			next;
		}
	} else {
		$num_added++;
		print "Adding $_.$ext\n";
	}
	m|([^/]+/+[^/]+)$|;
	$artist = $artist{$1};
	$title = $track{$1};
	$album = $album{$1};
	$track = $tracknr{$1};
	if($title) {
#		print STDERR "+";
	} else {
		print STDERR "$_\n\t";
		foreach $tr (keys %track) {
			$tr =~ /^\Q$_-/ and do {
				$artist = $artist{$tr};
				$title = $track{$tr};
				$album = $album{$tr};
				print STDERR "->";
				last;
			}
		}
		$title or do {
			($artist, $title, $track, $album) = extract_artist_title($_);
			print STDERR "-->";
		};
		print STDERR "$artist :: $title ($album [$track])\n";
	}
	$album or $album = $artist{$_};
	$album or $album = "";

	if($ext eq 'mp3') {
		my $info = get_mp3info("$_.mp3");
		$length = $info->{MM} * 60 + $info->{SS};
		$encoding = sprintf "MP3 %dkb/s", $info->{BITRATE};
		if($info->{FREQUENCY}  < 44 || $info->{FREQUENCY} > 45) {
			my $s = sprintf "%f", $info->{FREQUENCY};
			$s =~ s/\.?0+$//;
			$encoding .= ", ${s}kHz";
		}
		$encoding .= " mono" if !$info->{STEREO};
	} elsif($ext eq 'wav') {
		my ($sfreq, $chan, $sec) = get_wav_params("$_.$ext");
		$length = $sec;
		$encoding = "WAV";
		if($sfreq != 44100) {
			my $s = sprintf "%f", $sfreq / 1000;
			$s =~ s/\.?0+$//;
			$encoding .= ", ${s}kHz";
		}		
		$encoding .= " mono" if $chan == 1;
	} elsif($ext eq 'pac') {
		my ($sfreq, $chan, $sec) = get_wav_params("$_.$ext", 14);
		$length = 0 + $sec;
		$encoding = "LPAC";
		if($sfreq != 44100) {
			my $s = sprintf "%f", $sfreq / 1000;
			$s =~ s/\.?0+$//;
			$encoding .= ", ${s}kHz";
		}		
		$encoding .= " mono" if $chan == 1;
	} elsif($ext eq 'ogg') {
		$length = 0;
		$encoding = "Ogg-Vorbis";
	} else {
		$length = 0;
		$encoding = "unknown";
	}
		
	$sth = $dbh->prepare("REPLACE INTO songs (artist,title,album,track,filename,length,encoding) VALUES (?,?,?,?,?,?,?);");
	$sth->execute($artist, $title, $album, $track, "$_.$ext", $length, $encoding)
                or die "can't do sql command: $dbh->errstr";
}

$sth = $dbh->prepare("DELETE FROM songs WHERE filename=?");
foreach(keys %filename) {
	$sth->execute($_);
	print "Deleting $_\n";
	$num_deleted++;
}

$dbh->disconnect();

printf <<EOF, $num_added, $num_updated, $num_deleted, $num_skipped;
%4d songs added.
%4d songs updated.
%4d songs deleted.
%4d songs skipped.
EOF
