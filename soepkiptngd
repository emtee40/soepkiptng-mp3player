#!/usr/bin/perl -w
############################################################################
# soepkiptngd (Soepkip The Next Generation daemon)
#
# (c) copyright 2000 Eric Lammerts <eric@lammerts.org>
#
# loosely based on `mymusic' by "caffiend" <caffiend@atdot.org>
# and `Radio Soepkip' by Andre Pool <andre@scintilla.utwente.nl>
#
# $Id$
############################################################################
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# A copy of the GNU General Public License is available on the World Wide Web
# at `http://www.gnu.org/copyleft/gpl.html'.  You can also obtain it by
# writing to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
############################################################################

my $configfile = "/etc/soepkiptng.conf";

use DBI;
use Getopt::Std;
use IO::Handle;
use IO::Socket;
use POSIX ":sys_wait_h";
use Sys::Hostname;

use integer;
use strict;
use vars qw(%conf $dbh $restart $opt_d $opt_r $opt_s $cdrplaypid
	$pid_status $pid_signal $pid);


sub rotatelog(;$) {
	if($_[0] or -s STDERR > 65000) {
		rename $conf{errfile}, "$conf{errfile}.old" or do {
			warn "rename $conf{errfile} -> $conf{errfile}.old: $!\n";
			return;
		};
		close STDERR;
		open STDERR, ">$conf{errfile}";
		STDERR->autoflush(1);
	}
}

sub warnrotate {
	printf STDERR "%s %s", scalar localtime, $_[0];
	rotatelog();
}

sub dierotate {
	printf STDERR "%s %s", scalar localtime, $_[0];
	rotatelog();
	exit 1;
}

sub child_reaper {
	for(;;) {
		my $p = waitpid(-1, &WNOHANG);
		return if $p < 1;
		warn sprintf "reaped child %d, sig=%d status=%d\n",
			$p, $? & 0x7f, $? >> 8;
		if($p == $cdrplaypid) {
			unlink $conf{statusfile};
			die "exiting because '$conf{playercmd}' died.\n";
		} elsif($p == $pid) {
			$pid = 0;
			$pid_status = $? >> 8;
			$pid_signal = $? & 0x7f;
			warn "player finished ($p)\n";
		}
	}
};

sub get_song_jingle() {
	local *JINGLEDIR;
	my ($song_id, $filename);

	$song_id = 0;
	if($conf{jingledir} && opendir JINGLEDIR, $conf{jingledir}) {
		foreach(sort readdir JINGLEDIR) {
			next if /^\./;
			warn "playing jingle $conf{jingledir}/$_\n";
			$song_id = -1;
			$filename = "$conf{jingledir}/$_";
			last;
		}
		closedir JINGLEDIR;
	}
	$song_id or return undef;
	return ($song_id, 'J', $filename, '');
}

sub get_song_queued() {
	my ($song_id, $song_order, $filename, $pres, $user);

	# get queued song
	$dbh->do("LOCK TABLES queue WRITE, song READ");
	for(;;) {
		($song_id, $song_order, $filename, $pres, $user) = $dbh->selectrow_array(
			"SELECT queue.song_id,queue.song_order,song.filename," .
			"       song.present,queue.user" .
			" FROM queue,song" .
			" WHERE queue.song_id=song.id" .
			" ORDER BY queue.song_order" .
			" LIMIT 1"
		);
		last if !$song_id || $pres;
		warn "deleting non-present song $song_id ($filename)\n";
		$dbh->do("DELETE FROM queue WHERE song_id = $song_id");
	}
		

	if($song_id) {
		warn "playing queued $filename\n";

		# delete it from the queue
		$dbh->do("DELETE FROM queue WHERE song_id = $song_id");
		$dbh->do("UPDATE queue SET song_order = song_order - $song_order - 1");
	}
	$dbh->do("UNLOCK TABLES");
	$song_id or return undef;
	return ($song_id, 'Q', $filename, $user);
}

sub get_song_random_recent() {
	no integer;
	my ($song_id, $filename);

	if(rand() < $conf{recent_prob}) {
		my $maxage = $conf{recent_age} * 86400;
		($song_id, $filename) = $dbh->selectrow_array(
			"SELECT id,filename FROM song WHERE present AND filename LIKE '/%' AND " .
			"unix_timestamp(now()) - unix_timestamp(time_added) < $maxage AND " .
			"unix_timestamp(now()) - unix_timestamp(last_played) > $conf{min_random_time} " .
			"ORDER BY rand() LIMIT 1"
		);
		warn "playing recent $filename\n" if $song_id;
	}
	$song_id or return undef;
	return ($song_id, 'r', $filename, '');
}

sub get_song_random() {
	my ($song_id, $filename);

	my $min = $conf{min_random_time};
	for(;;) {
		($song_id, $filename) = $dbh->selectrow_array(
			"SELECT id,filename FROM song WHERE present AND filename LIKE '/%' AND " .
			"unix_timestamp(now()) - unix_timestamp(last_played) > $min " .
			"ORDER BY rand() LIMIT 1"
		);
		last if $song_id || $min == 0;
		$min >>= 1;
		warn "no random song found, retrying with min_random_time=$min\n";
	}
	warn "playing random $filename\n";
	$song_id or return undef;
	return ($song_id, 'R', $filename, '');
}

sub logprintf($@) {
	my ($fmt, @args) = @_;

	# write to log file
	if(open LOG, ">>$conf{logfile}") {
		printf LOG "%s $fmt\n", scalar localtime, @args;
		close LOG;
	} else {
		warn "cannot open logfile $conf{logfile}: $!\n";
	}
}

sub playshoutcast($) {
	my ($file) = @_;
	my $starttime;
	my $errors = 0;

	# append trailing slash if necessary
	# (mpg123 gets confused if it's missing)
	$file =~ m|^http:/+[^/]+/| or $file .= "/";

	for(;;) {
		$starttime = time;
		system qw/mpg123 -s -y -pnone -r44100 --stereo/, $file;
		if(time - $starttime < 60) {
			$errors++;
		} else {
			$errors = 0;
		}
		if($errors > 5) {
			die "Too many errors, giving up on $file.\n";
		}
		sleep 1;
		warn "restarting mpg123 [$file]\n";
	}
}

sub start_play($) {
	my ($filename) = @_;

	if(($pid = fork) == 0) {
		# get our own program group so our parent can kill us easily
		setpgrp;

		# restore broken pipe behavior
		$SIG{'PIPE'} = 'DEFAULT';

		# get file type
		$filename =~ /([^.]*)$/;
		my $ext = lc($1);

		if($filename =~ /^http:/) {
			playshoutcast($filename);
		} elsif($ext eq "mp2" || $ext eq "mp3") {
			exec "mp3toraw", $filename;
		} elsif($ext eq "ogg") {
			exec "ogg2raw", $filename;
		} elsif($ext eq "wav") {
			exec "wav2raw", $filename;
		} elsif($ext eq "pac") {
			exec "lpac2raw", $filename;
		} elsif($ext eq "raw") {
			exec "cat", $filename;
		} elsif($ext eq "flac") {
			exec "flac", "-d", "-fl", $filename, "-";
		} else {
			die "no player for .$ext files.\n";
		}
		die "exec failed";
	}
}

sub perish {
	my ($sig) = @_;

	unlink $conf{statusfile};
	$dbh and $dbh->disconnect;
	warn "got SIG$sig, kill -KILL -$pid and $cdrplaypid, exiting\n";
	kill 'KILL', -$pid, $cdrplaypid;
	exit;
};

getopts('dr:s:');
my $debug = 1 if $opt_d;

my $field;
open F, $configfile
	or die "$configfile: $!\n";
while(<F>) {
	/^#/ and next;
	s/\s+$//;
	/./ or next;
	if(/^(\w+)\s*=\s*(.*?)\s*$/) {
		$field = $1;
		$conf{$field} = $2;
	} elsif(/^\s+(.*?)\s*$/) {
		# continuation line
		$conf{$field} .= "\n$1";
	} else {
		die "$configfile line $.: invalid format\n";
	}
}
close F;

$ENV{'PATH'} = "$conf{progdir}/bin:$ENV{'PATH'}";

if(open ST, $conf{statusfile}) {
	my ($s, $f, $pid) = <ST>;
	close ST;
	$pid = 0 + $pid;
	if($pid) {
		kill 0, $pid
			and die "Another copy of soepkiptngd is already running! (pid $pid)\n";
	}
}

my $killsock = IO::Socket::INET->new(Listen => 5)
	or die "cannot create listening TCP socket: $!\n";
my $killhost = hostname;
my $killport = $killsock->sockport();

unless($debug) {
	if(!$opt_r) {
		fork && exit;
		chdir "/";
		setpgrp();
	}
	open STDIN, "</dev/null";
	open STDERR, ">>$conf{errfile}" or do {
		rotatelog(1);
		open STDERR, ">$conf{errfile}" or die "$conf{errfile}: $!\n";
		warn "logs rotated prematurely because of permission problems.\n";
	};
	STDERR->autoflush(1);
	$SIG{__DIE__} = \&dierotate;
	$SIG{__WARN__} = \&warnrotate;
}
sleep $opt_s if $opt_s;

warn sprintf "*** starting soepkiptngd (pid=$$) %s ***\n", '$Id$';
warn "PATH=$ENV{'PATH'}\n";

$SIG{'TERM'} = \&perish;
$SIG{'INT'} = \&perish;

$SIG{'USR1'} = sub {
	warn "setting restart flag\n";
	$restart = 1;
};

$SIG{'PIPE'} = 'IGNORE';

if($opt_r) {
	$cdrplaypid = $opt_r;
	warn "cdrplaypid=$cdrplaypid (from -r)\n";
} else {
	# when $playercmd fails instantly, we might get SIGCHLD
	# before $cdrplaypid is set !!!
	$cdrplaypid = open STDOUT, "|$conf{playercmd}";
	warn "cdrplaypid=$cdrplaypid\n";

	# play 2 sec. of silence to get my external DAC going
	print pack("x352800");
}

# we might have missed the exiting of cdrplay, so reap once now
child_reaper();

srand;

my $num_errors = 0;
my ($killsock_conn);
for(;;) {
	my ($song_id, $songtype, $filename, $user);
	my ($childtime);

	if($restart) {
		# close-on-exec apparently doesn't work
#		$dbh->disconnect;
		$killsock_conn and $killsock_conn->close();
		$killsock->close();
		unlink $conf{statusfile};

		warn "execing myself\n";
		exec "$conf{progdir}/soepkiptngd", '-r', $cdrplaypid;
		die "$conf{progdir}/soepkiptngd: $!\n";
	}

	if($num_errors > 1) {
		# exponential backoff in retries, max 1024 sec. (17 min 4 s)
		sleep 1 << ($num_errors < 10? $num_errors : 10);
	}

	# (re)open database connection if necessary
	if(!$dbh) {
		$dbh = DBI->connect("DBI:mysql:$conf{db_name}:$conf{db_host}",
			$conf{db_user}, $conf{db_pass}) or do {
			warn "Can't connect to database $conf{db_name}" .
				"\@$conf{db_host} as user $conf{db_user}\n";
			$num_errors++;
			next;
		};
	}

	($song_id, $songtype, $filename, $user) = get_song_jingle();
	$song_id or ($song_id, $songtype, $filename, $user) = get_song_queued();
	$song_id or ($song_id, $songtype, $filename, $user) = get_song_random_recent();
	$song_id or ($song_id, $songtype, $filename, $user) = get_song_random();

	if($song_id) {
		# update database
		$dbh->do("UPDATE song set last_played=NULL where id=$song_id");
	} else {
		warn "no song found.\n";
		$dbh->disconnect;
		$dbh = undef;
		$num_errors++;
		next;
	}

	# write to log file
	logprintf("%s %6d %s", $songtype, $song_id, $filename);

	# write status file
	my $status = <<EOF;
$song_id
$filename
$$
$cdrplaypid
$killhost
$killport
$songtype
$user
EOF
	if(open ST, ">$conf{statusfile}.tmp") {
		print ST $status;
		close ST;
		rename "$conf{statusfile}.tmp", $conf{statusfile}
			or warn "cannot rename $conf{statusfile}.tmp -> $conf{statusfile}: $!\n";
	} else {
		warn "cannot open statusfile $conf{statusfile}: $!\n";
	}

	# close accepted socket after statusfile was updated
	if($killsock_conn) {
		print $killsock_conn $status;
		$killsock_conn->close();
		undef $killsock_conn;
	}

	# launch player
	my $starttime = time;
	if($debug) {
		my ($a, $b, $c, $d) = times;
		$childtime = $c + $d;
	}
	start_play($filename);
	warn "pid=$pid\n";

	# wait until player is done or we get a connect on $killsock
	my ($rin, $rout);
	vec($rin = '', $killsock->fileno(), 1) = 1;
	for(;;) {
		child_reaper();
		last if $pid == 0;
		if(select($rout = $rin, undef, undef, 0.1) == 1) {
			warn "got connection\n";

			# kill player
			my $p = $pid;
			if($p) {
				warn "kill -KILL -$p\n";
				kill 'KILL', -$p
					or warn "kill -KILL -$p: $!\n";
			}

			# tell cdrplay to flush its buffers
			warn "kill -USR1 $cdrplaypid\n";
			kill 'SIGUSR1', $cdrplaypid
				or warn "kill -USR1 $cdrplaypid: $!\n";

			# accept the tcp connection; we close it later,
			# after a new song has been selected
			$killsock_conn = $killsock->accept();

			# write to log file
			logprintf("K %6d", $song_id);
		}
	}
	if(($pid_status || $pid_signal) && !$killsock_conn) {
		# write to log file
		logprintf("E %6d status=%d signal=%d", $song_id, $pid_status, $pid_signal);
		$num_errors++;
	} else {
		$num_errors = 0;
	}

	if($debug) {
		my ($a, $b, $c, $d) = times;
		$childtime = $c + $d - $childtime;
		warn "song finished, time=$childtime\n";
	}

	# delete jingle files
	if($songtype eq 'J') {
		unlink "$filename" or warn "unlink $filename: $!\n";
	}

	# prevent us from eating 100% cpu time in case of misconfiguration
	time == $starttime and $num_errors++;
}

