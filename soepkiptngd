#!/usr/bin/perl -w
############################################################################
# soepkiptngd (Soepkip The Next Generation daemon)
#
# (c) copyright 2000 Eric Lammerts <eric@lammerts.org>
#
# loosely based on `mymusic' by "caffiend" <caffiend@atdot.org>
# and `Radio Soepkip' by Andre Pool <andre@scintilla.utwente.nl>
#
# $Id$
############################################################################
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2, as 
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# A copy of the GNU General Public License is available on the World Wide Web
# at `http://www.gnu.org/copyleft/gpl.html'.  You can also obtain it by
# writing to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
############################################################################

use Cwd 'abs_path';
use DBI;
use Errno;
use Fcntl;
use Getopt::Std;
use IO::Handle;
use IO::Socket;
use POSIX ":sys_wait_h";
use Sys::Hostname;

use integer;
use strict;
use vars qw(%conf $dbh $restart $opt_d $opt_r $opt_s $opt_c $cdrplaypid
	$pid_status $pid_signal $pid @preload $paused $randsong);

# find program directory
$_ = $0;
while(-l) {
	my $l = readlink or die "readlink $_: $!\n";
	if($l =~ m|^/|) { $_ = $l; } else { s|[^/]*$|/$l|; }
}
m|(.*)/|;
my $progdir = abs_path($1);

require "$progdir/soepkiptng.lib";


sub rotatelog(;$) {
	if($_[0] or -s STDERR > 65000) {
		rename $conf{errfile}, "$conf{errfile}.old" or do {
			warn "rename $conf{errfile} -> $conf{errfile}.old: $!\n";
			return;
		};
		close STDERR;
		open STDERR, ">$conf{errfile}";
		STDERR->autoflush(1);
	}
}

sub warnrotate {
	printf STDERR "%s %s", scalar localtime, $_[0];
	rotatelog();
}

sub dierotate {
	printf STDERR "%s %s", scalar localtime, $_[0];
	rotatelog();
	exit 1;
}

sub child_reaper {
	for(;;) {
		my $p = waitpid(-1, &WNOHANG);
		return if $p < 1;
		warn sprintf "reaped child %d, sig=%d status=%d\n",
			$p, $? & 0x7f, $? >> 8;
		if($p == $cdrplaypid) {
			unlink $conf{statusfile};
			die "exiting because '$conf{playercmd}' died.\n";
		} elsif($p == $pid) {
			$pid = 0;
			$pid_status = $? >> 8;
			$pid_signal = $? & 0x7f;
			warn "player finished ($p)\n";
			if($paused) {
				warn "resuming output\n";
				player_cmd("resume") or warn "error resuming output\n";
				$paused = 0;
			}
		}
	}
};

BEGIN {
	my %delete;

	sub get_song_jingle() {
		my $s = undef;
		local *JINGLEDIR;

		if($conf{jingledir} && opendir JINGLEDIR, $conf{jingledir}) {
			foreach(sort readdir JINGLEDIR) {
				next if /^\./;
				next if $delete{"$conf{jingledir}/$_"};

				warn "playing jingle $conf{jingledir}/$_\n";

				$s->{id} = -1;
				$s->{type} = 'J';
				$s->{filename} = "$conf{jingledir}/$_";
				$s->{artist} = '** Jingle **';
				$s->{album} = '';
				$s->{track} = 0;
				$s->{title} = $_;
				$s->{user} = '';
				$s->{length} = 0;
				$s->{encoding} = '';
				last;
			}
			closedir JINGLEDIR;
		}
		$delete{$s->{filename}} = 1 if $s;
		return $s;
	}

	sub delete_jingles() {
		foreach(keys %delete) {
			if(unlink $_ or $!{ENOENT}) {
				delete $delete{$_};
			} else {
				warn "unlink $_: $!\n";
			}
		}
	}
}

sub get_song_queued() {
	my $s = undef;

	# get queued song
	$dbh->do("LOCK TABLES queue WRITE, song READ, artist READ, album READ");
	for(;;) {
		my $sth = $dbh->prepare(
			"SELECT queue.song_id as id,queue.song_order as song_order,".
			"       queue.user as user, artist.name as artist,".
			"       album.name as album, song.*".
			" FROM queue,song,artist,album" .
			" WHERE queue.song_id=song.id AND artist.id=song.artist_id" .
			"       AND album.id=song.album_id" .
			" ORDER BY queue.song_order" .
			" LIMIT 1"
		);
		$sth->execute or last;
		$s = $sth->fetchrow_hashref or last;
		if($s->{present}) {
			warn "playing queued $s->{filename}\n";
			$s->{type} = 'Q';

			# delete it from the queue
			$dbh->do("DELETE FROM queue WHERE song_id = $s->{id}");
			$dbh->do("UPDATE queue SET song_order = song_order - $s->{song_order} - 1");
			last;
		}

		warn "deleting non-present song $s->{id} ($s->{filename})\n";
		$dbh->do("DELETE FROM queue WHERE song_id = $s->{id}");
		$s = undef;
	}
	$dbh->do("UNLOCK TABLES");
	return $s;
}

sub get_song_random_recent() {
	no integer;
	my $s = undef;

	rand() < $conf{recent_prob} or return undef;

	my $sth = $dbh->prepare(
		"SELECT artist.name as artist, album.name as album,song.*".
		" FROM song,artist,album WHERE present AND filename LIKE '/%' AND" .
		"      artist.id=song.artist_id AND album.id=song.album_id AND" .
		" unix_timestamp(now()) - unix_timestamp(time_added) < ? AND" .
		" unix_timestamp(now()) - unix_timestamp(last_played) > ? AND" .
		" random_pref > 0" .
		" ORDER BY rand() LIMIT 1"
	);
	$sth->execute($conf{recent_age} * 86400, $conf{min_random_time}) or return undef;
	$s = $sth->fetchrow_hashref or return undef;

	warn "playing recent $s->{filename}\n";
	$s->{type} = 'r';
	$s->{user} = '';
	return $s;
}

sub select_song_random() {
	my $s = undef;

	my $min = $conf{min_random_time};
	my $where = "present AND filename LIKE '/%' AND " .
	            "unix_timestamp(now()) - unix_timestamp(last_played) > ?";

	my $ordermult = $conf{ignore_random_pref}? "" : "*pow(random_pref/?,1/?)";
	my $sth = $dbh->prepare(
		"SELECT artist.name as artist, album.name as album,song.* " .
		"FROM song,artist,album " .
		"WHERE $where AND artist.id=song.artist_id AND album.id=song.album_id " .
		"AND random_pref > 0 " .
		"ORDER BY rand() $ordermult DESC LIMIT 1");

	for(; $min > 0; $min >>= 1, warn "no random song found, retrying with min_random_time=$min\n") {
		if($conf{ignore_random_pref}) {
			$sth->execute($min)
				or next;
		} else {
			my ($sum_pref, $count) = $dbh->selectrow_array(
				"SELECT sum(random_pref),count(*) FROM song WHERE $where", undef, $min)
				or next;
			$sth->execute($min, $sum_pref, $count)
				or next;
		}
		$s = $sth->fetchrow_hashref
			and last;
	}
	$s or return undef;

	warn "selecting random $s->{filename} (pref $s->{random_pref})\n";
	return $s;
}

sub validate_song_random($) {
	my ($song) = @_;
	my $s = undef;

	$song or return undef;
	my $min = $conf{min_random_time};
	my $where = "song.id=? AND present AND filename LIKE '/%' AND " .
	            "unix_timestamp(now()) - unix_timestamp(last_played) > ?";

	my $sth = $dbh->prepare(
		"SELECT artist.name as artist, album.name as album,song.* " .
		"FROM song,artist,album " .
		"WHERE $where AND artist.id=song.artist_id AND album.id=song.album_id");

	$sth->execute($song->{id}, $min)
		or return undef;
	$s = $sth->fetchrow_hashref
		or return undef;

	warn "playing random $s->{filename} (pref $s->{random_pref})\n";
	$s->{type} = 'R';
	$s->{user} = '';

	return $s;
}

sub update_preload() {
	local *PRELOAD;

	$conf{preloadfile} or return;

	my $sth = $dbh->prepare(
		"SELECT song.id, song.filename, artist.name, album.name,".
		"       song.track, song.title, song.length, song.encoding".
		" FROM song,artist,album WHERE present AND filename LIKE '/%' AND" .
		"      artist.id=song.artist_id AND album.id=song.album_id AND" .
		" unix_timestamp(now()) - unix_timestamp(last_played) > $conf{min_random_time}" .
		" ORDER BY rand()*random_pref DESC LIMIT 10"
	);

	$sth->execute() or return;
	open PRELOAD, ">$conf{preloadfile}" or return;
	my (@s);
	while(@s = $sth->fetchrow_array) {
		printf PRELOAD "%s\n", join("\t", @s);
		warn "add to preload: $s[1]\n";
	}
	close PRELOAD;

	warn "update preload $conf{preloadfile}\n";
	delete $conf{preloadfile};
}

sub get_song_preload() {
	my $s = undef;

	@preload or do {
		warn "no preloads available\n";
		return undef;
	};

	($s->{id}, $s->{filename}, $s->{artist}, $s->{album}, $s->{track},
	 $s->{title}, $s->{length}, $s->{encoding}) = split /\t+/, shift @preload;
	$s->{type} = "P";
	$s->{user} = '';

	warn "playing preload $s->{filename}\n";

	return $s;
}

sub logprintf($@) {
	my ($fmt, @args) = @_;

	# write to log file
	if(open LOG, ">>$conf{logfile}") {
		printf LOG "%s $fmt\n", scalar localtime, @args;
		close LOG;
	} else {
		warn "cannot open logfile $conf{logfile}: $!\n";
	}
}

sub exec_prog(;$$) {
	my ($prog, $pause) = @_;

	if($pause) {
		$paused = 1;
	}
	if(($pid = fork) == 0) {
		# get our own program group so our parent can kill us easily
		setpgrp;

		# restore broken pipe behavior
		$SIG{'PIPE'} = 'DEFAULT';

		if($pause) {
			warn "pausing output\n";
			player_cmd("waitbufferempty", "pause") or warn "error pausing output\n";
		}

		if(defined $prog) {
			exec @$prog;
			die "exec $prog->[0] failed: $!\n";
		}
	}
	return $pid;
}

sub play_mplayer($) {
	my @args = @_;
	local *F;

	exec_prog and return;

	# open duplicate of stdout
	open F, ">&STDOUT";
	# no close-on-exec
	fcntl F, F_SETFD, 0;

	open STDIN, "/dev/null";
	open STDERR, ">/dev/null";
	open STDOUT, ">&STDERR";
	delete $ENV{http_proxy};

	if($args[0] =~ /^http:/) { unshift @args, "-cache", 512; }

	exec qw"mplayer -ao pcm -nowaveheader -aop list=resample:fout=44100 -vc dummy -vo null",
		"-aofile", "/dev/fd/" . fileno(F), @args;
	die "mplayer: $!\n";
}


sub start_play($) {
	my ($filename) = @_;

	# get file type
	$filename =~ /([^.]*)$/;
	my $ext = lc($1);

	if($filename =~ /^http:/ || $ext eq "wma") {
		play_mplayer($filename);
	} elsif($filename =~ /^cdda:[^:]*:(\d+)/) {
		exec_prog ["$conf{cdda_prog} $1"];
	} elsif($ext eq "mp2" || $ext eq "mp3") {
		exec_prog ["mp3toraw", $filename];
	} elsif($ext eq "ogg") {
		#this does not handle mono->stereo, resampling:
		#exec_prog [qw/oggdec -Q -b16 -e0 -R1 -s1 -o-/, $filename];
		exec_prog ["ogg2raw", $filename];
	} elsif($ext =~ /^(mid|rcp|r36|g18|g36|mod)$/) {
		exec_prog ["midi2raw", $filename];
	} elsif($ext eq "wav") {
		exec_prog ["wav2raw", $filename];
	} elsif($ext eq "pac") {
		exec_prog ["lpac2raw", $filename];
	} elsif($ext eq "raw") {
		exec_prog ["cat", $filename];
	} elsif($ext eq "flac") {
		exec_prog [qw/flac -sdc --endian=little --sign=signed/,
			qw/--force-raw-format/, $filename];
		#exec_prog ["flac", "-d", "-fl", $filename, "-"];
	} elsif($ext =~ /^(aac|m4a)$/) {
		exec_prog ["aac2raw", $filename];
	} elsif($ext eq "shn") {
		exec_prog [qw/shntool cat -nr -nh/, $filename];
	} elsif($ext =~ /^mp[cp+]$/) {
		exec_prog [qw/musepack2raw/, $filename];
	} elsif($ext =~ /^(mpe?g|m2v|avi|asx|asf|vob|wmv|ra?m|ra|mov)$/) {
		exec_prog ["soepkiptng_video", $filename], 1;
	} elsif($ext eq "ac3") {
		exec_prog ["a52dec", "-o", "oss6", $filename], 1;
	} else {
		warn "no player for .$ext files.\n";
	}
}

sub perish {
	my ($sig) = @_;

	unlink $conf{statusfile};
	$dbh and $dbh->disconnect;
	warn "got SIG$sig, kill -KILL -$pid and $cdrplaypid, exiting\n";
	kill 'KILL', -$pid, $cdrplaypid;
	exit;
};

getopts('dr:s:c:');
my $debug = 1 if $opt_d;

read_configfile(\%conf, $opt_c);

$ENV{PATH} = "$progdir/bin:$ENV{PATH}";

if(open ST, $conf{statusfile}) {
	my ($s, $f, $pid) = <ST>;
	close ST;
	$pid = 0 + $pid;
	if($pid) {
		kill 0, $pid
			and die "Another copy of soepkiptngd is already running! (pid $pid)\n";
	}
}

my $killsock = IO::Socket::INET->new(Listen => 5)
	or die "cannot create listening TCP socket: $!\n";
my $killhost = hostname;
my $killport = $killsock->sockport();

unless($debug) {
	if(!$opt_r) {
		fork && exit;
		chdir "/";
		setpgrp();
	}
	open STDIN, "</dev/null";
	open STDERR, ">>$conf{errfile}" or do {
		rotatelog(1);
		open STDERR, ">$conf{errfile}" or die "$conf{errfile}: $!\n";
		warn "logs rotated prematurely because of permission problems.\n";
	};
	STDERR->autoflush(1);
	$SIG{__DIE__} = \&dierotate;
	$SIG{__WARN__} = \&warnrotate;
}
sleep $opt_s if $opt_s;

warn sprintf "*** starting soepkiptngd (pid=$$) %s ***\n", '$Id$';
warn "PATH=$ENV{'PATH'}\n";

$SIG{'TERM'} = \&perish;
$SIG{'INT'} = \&perish;

$SIG{'USR1'} = sub {
	warn "setting restart flag\n";
	$restart = 1;
};

$SIG{'PIPE'} = 'IGNORE';

if($conf{preloadfile}) {
	local *PRELOAD;

	if(open PRELOAD, $conf{preloadfile}) {
		chop(@preload = <PRELOAD>);
		close PRELOAD;
		warn "preload: added " . scalar @preload . " songs.\n";
	} else {
		warn "$conf{preloadfile}: $!\n";
	}
}

if($opt_r) {
	$cdrplaypid = $opt_r;
	warn "cdrplaypid=$cdrplaypid (from -r)\n";
} else {
	# just to be sure to avoid sending pcm data to the terminal
	open STDOUT, ">/dev/null";

	# when $playercmd fails instantly, we might get SIGCHLD
	# before $cdrplaypid is set !!!
	$cdrplaypid = open STDOUT, "|$conf{playercmd}"
		or die "failed to start $conf{playercmd}: $!\n";
	warn "cdrplaypid=$cdrplaypid\n";

	# play 2 sec. of silence to get my external DAC going
	print "\0"x352800;
}

# we might have missed the exiting of cdrplay, so reap once now
child_reaper();

srand;

my $num_errors = 0;
my ($killsock_conn);
for(;;) {
	my ($song, $childtime);

	if($restart) {
		# close-on-exec apparently doesn't work
#		$dbh->disconnect;
		$killsock_conn and $killsock_conn->close();
		$killsock->close();
		unlink $conf{statusfile};

		warn "execing myself\n";
		exec "$progdir/soepkiptngd", '-r', $cdrplaypid;
		die "$progdir/soepkiptngd: $!\n";
	}

	if($num_errors > 1) {
		# exponential backoff in retries, max 1024 sec. (17 min 4 s)
		sleep 1 << ($num_errors < 10? $num_errors : 10);
	}

	# (re)open database connection if necessary
	if(!$dbh || !$dbh->ping) {
		$dbh = DBI->connect("DBI:mysql:$conf{db_name}:$conf{db_host}",
			$conf{db_user}, $conf{db_pass}) or warn
				"Can't connect to database $conf{db_name}" .
				"\@$conf{db_host} as user $conf{db_user}\n";
	}

	if($dbh) {
		$song = get_song_jingle() || get_song_queued() || get_song_random_recent() or do {
			$randsong = validate_song_random($randsong);
			if($randsong) {
				$song = $randsong;
				$randsong = undef;
			} else {
				$song = select_song_random() or do {
					$num_errors++;
					next;
				}
			}
		};

		# random lookup can take a few sec; maybe a jingle/queued song
		# has been added in the meantime (these lookups are very fast)
		if($song->{type} =~ /r/i) {
			my $s = get_song_jingle() || get_song_queued();
			$song = $s if $s;
		}

		if($song->{id}) {
			# update database
			$dbh->do("UPDATE song set last_played=NULL where id=$song->{id}");

			update_preload();
		} else {
			warn "no song found.\n";
			$dbh->disconnect;
			$dbh = undef;
			$num_errors++;
			next;
		}
	} else {
		$song = get_song_preload() or do {
			$num_errors++;
			next;
		};
	}

	# write to log file
	logprintf("%s %6d %s", $song->{type}, $song->{id}, $song->{filename});

	# write status file
	my $status = <<EOF;
$song->{id}
$song->{filename}
$$
$cdrplaypid
$killhost
$killport
$song->{type}
$song->{user}
$song->{artist}
$song->{title}
$song->{album}
$song->{track}
$song->{length}
$song->{encoding}
EOF
	if(open ST, ">$conf{statusfile}.tmp") {
		print ST $status;
		close ST;
		rename "$conf{statusfile}.tmp", $conf{statusfile}
			or warn "cannot rename $conf{statusfile}.tmp -> $conf{statusfile}: $!\n";
	} else {
		warn "cannot open statusfile $conf{statusfile}: $!\n";
	}

	# close accepted socket after statusfile was updated
	if($killsock_conn) {
		print $killsock_conn $status;
		$killsock_conn->close();
		undef $killsock_conn;
	}

	# reset time counter
	warn "kill -ALRM $cdrplaypid\n";
	kill 'SIGALRM', $cdrplaypid
		or warn "kill -ALRM $cdrplaypid: $!\n";

	# launch player
	my $starttime = time;
	if($debug) {
		my ($a, $b, $c, $d) = times;
		$childtime = $c + $d;
	}
	start_play($song->{filename});
	warn "pid=$pid\n";

	# update random song cache
	if(!$randsong) {
		warn "selecting random song cache\n";
		$randsong = select_song_random();
	}

	# wait until player is done or we get a connect on $killsock
	my ($rin, $rout);
	vec($rin = '', $killsock->fileno(), 1) = 1;
	for(;;) {
		child_reaper();
		last if $pid == 0;
		if(select($rout = $rin, undef, undef, 0.1) == 1) {
			warn "got connection\n";

			# kill player
			my $p = $pid;
			if($p) {
				warn "kill -KILL -$p\n";
				kill 'KILL', -$p
					or warn "kill -KILL -$p: $!\n";
			}

			# tell cdrplay to flush its buffers
			warn "kill -USR1 $cdrplaypid\n";
			kill 'SIGUSR1', $cdrplaypid
				or warn "kill -USR1 $cdrplaypid: $!\n";

			# accept the tcp connection; we close it later,
			# after a new song has been selected
			$killsock_conn = $killsock->accept();

			# write to log file
			logprintf("K %6d", $song->{id});
		}
	}

	if(($pid_status || $pid_signal) && !$killsock_conn) {
		# write to log file
		logprintf("E %6d status=%d signal=%d", $song->{id}, $pid_status, $pid_signal);
		$num_errors++;
	} else {
		$num_errors = 0;
	}

	if($debug) {
		my ($a, $b, $c, $d) = times;
		$childtime = $c + $d - $childtime;
		warn "song finished, time=$childtime\n";
	}

	# delete jingle files
	delete_jingles();

	# prevent us from eating 100% cpu time in case of misconfiguration
	time == $starttime and $num_errors++;
}

