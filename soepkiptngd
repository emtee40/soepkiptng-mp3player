#!/usr/bin/perl
############################################################################
# soepkiptngd (Soepkip The Next Generation daemon)
#
# (c) copyright 2000 Eric Lammerts <eric@lammerts.org>
#
# loosely based on `mymusic' by "caffiend" <caffiend@atdot.org>
# and `Radio Soepkip' by Andre Pool <andre@scintilla.utwente.nl>
#
# $Id$
############################################################################
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# A copy of the GNU General Public License is available on the World Wide Web
# at `http://www.gnu.org/copyleft/gpl.html'.  You can also obtain it by
# writing to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
############################################################################

$configfile = "/etc/soepkiptng.conf";
$ENV{'PATH'} = "/usr/local/bin:/usr/bin:/bin";

use DBI;
use IO::Handle;
use MPEG::MP3Info;
use IO::Socket;
use POSIX ":sys_wait_h";
use Sys::Hostname;
use Getopt::Std;

getopts('dr:');
$debug = 1 if $opt_d;

open F, $configfile
	or die "$configfile: $!\n";
while(<F>) {
	/^#/ and next;
	s/\s+$//;
	/./ or next;
	if(/^(\w+)\s*=\s*(.*?)\s*$/) {
		$f = $1;
		${$f} = $2;
	} elsif(/^\s+(.*?)\s*$/) {
		# continuation line
		${$f} .= "\n$1";
	} else {
		die "$configfile line $.: invalid format\n";
	}
}
close F;

if(open ST, $statusfile) {
	my ($s, $f, $pid) = <ST>;
	close ST;
	$pid = 0 + $pid;
	if($pid) {
		kill 0, $pid
			and die "Another copy of soepkiptngd is already running! (pid $pid)\n";
	}
}

$killsock = IO::Socket::INET->new(Listen => 5)
	or die "cannot create listening TCP socket: $!\n";
$killhost = hostname;
$killport = $killsock->sockport();

$dbh = DBI->connect("DBI:mysql:$db_name:$db_host", $db_user, $db_pass)
	or die "Can't connect to database $db_name\@$db_host as user $db_user\n";

sub rotatelog(;$) {
	if($_[0] or -s STDERR > 65000) {
		rename $errfile, "$errfile.old" or do {
			warn "rename $errfile -> $errfile.old: $!\n";
			return;
		};
		close STDERR;
		open STDERR, ">$errfile";
		STDERR->autoflush(1);
	}
}

sub warnrotate {
	printf STDERR "%s %s", scalar localtime, $_[0];
	rotatelog();
}

sub dierotate {
	printf STDERR "%s %s", scalar localtime, $_[0];
	rotatelog();
	exit 1;
}

unless($debug) {
	if(!$opt_r) {
		fork && exit;
		chdir "/";
		setpgrp();
	}
	open STDIN, "</dev/null";
	open STDERR, ">>$errfile" or do {
		rotatelog(1);
		open STDERR, ">$errfile" or die "$errfile: $!\n";
		warn "logs rotated prematurely because of permission problems.\n";
	};
	STDERR->autoflush(1);
	$SIG{__DIE__} = \&dierotate;
	$SIG{__WARN__} = \&warnrotate;
}

$SIG{'CHLD'} = sub {
	for(;;) {
		my $p = waitpid(-1, &WNOHANG);
		return if $p < 1;
		warn sprintf "reaped child %d, sig=%d status=%d\n",
			$p, $? & 0x7f, $? >> 8;
		if($p == $cdrplaypid) {
			unlink $statusfile;
			die "exiting because '$playercmd' died.\n";
		} elsif($p == $pid) {
			$pid = 0;
			$pid_status = $? >> 8;
			$pid_signal = $? & 0x7f;
			warn "player finished ($p)\n";
		}
	}
};

warn "********** starting (pid=$$) **********\n";

$SIG{'TERM'} = sub {
	unlink $statusfile;
	warn "got SIGTERM, kill -KILL -$pid and $cdrplaypid, exiting\n";
	kill 'KILL', -$pid, $cdrplaypid;
	exit;
};

$SIG{'USR1'} = sub {
	warn "setting restart flag\n";
	$restart = 1;
};

if($opt_r) {
	$cdrplaypid = $opt_r;
	warn "cdrplaypid=$cdrplaypid (from -r)\n";
} else {
	$cdrplaypid = open STDOUT, "|$playercmd";
	warn "cdrplaypid=$cdrplaypid\n";
}

$SIG{'PIPE'} = 'IGNORE';

for(;;) {
	my ($song_id, $songtype, $filename);

	if($restart) {
		# close-on-exec apparently doesn't work
		$dbh->disconnect;
		$killsock_conn and $killsock_conn->close();
		$killsock->close();

		warn "execing myself\n";
		exec $0, '-r', $cdrplaypid;
		die "$0: $!\n";
	}

	# get queued song
	$dbh->do("LOCK TABLES queue WRITE, songs READ");
	($song_id, $song_order, $filename) = $dbh->selectrow_array(
		"SELECT queue.song_id,queue.song_order,songs.filename" .
		" FROM queue,songs" .
		" WHERE queue.song_id=songs.id AND songs.present" .
		" ORDER BY queue.song_order" .
		" LIMIT 1"
	);

	if($song_id) {
		$songtype = 'Q';
		warn "playing queued $filename\n";

		# delete it from the queue
		$dbh->do("DELETE FROM queue WHERE song_id = $song_id");
		$dbh->do("UPDATE queue SET song_order = song_order - $song_order - 1");
	}
	$dbh->do("UNLOCK TABLES");

	#  if nothing in queue, get random song
	if(!$song_id) {
		$songtype = 'R';
		my $min = $min_random_time;
		for(;;) {
			($song_id, $filename) = $dbh->selectrow_array(
				"SELECT id,filename FROM songs WHERE present AND " .
				"unix_timestamp(now()) - unix_timestamp(last_played) > $min " .
				"ORDER BY rand() LIMIT 1"
			);
			last if $song_id || $min == 0;
			$min >>= 1;
			warn "no random song found, retrying with min_random_time=$min\n";
		}
		warn "playing random $filename\n";
	}

	if(!$song_id) {
		warn "no random song found.\n";
		sleep 5;
		next;
	}

	# update database
	$dbh->do("UPDATE songs set last_played=NULL where id=$song_id");

	# write to log file
	logprintf("%s %6d %s", $songtype, $song_id, $filename);

	# write status file
	if(open ST, ">$statusfile") {
		print ST <<EOF;
$song_id
$filename
$$
$cdrplaypid
$killhost
$killport
EOF
		close ST;
	} else {
		warn "cannot open statusfile $statusfile: $!\n";
	}

	# close accepted socket after statusfile was updated
	if($killsock_conn) {
		print $killsock_conn <<EOF;
$song_id
$filename
$$
$cdrplaypid
$killhost
$killport
EOF
		$killsock_conn->close();
		undef $killsock_conn;
	}

	# get file type
	$filename =~ /([^.]*)$/;
	$ext = lc($1);

	# launch player
	$starttime = time;
	if($debug) {
		($a, $b, $c, $d) = times;
		$childtime = $c + $d;
	}
	if(($pid = fork) == 0) {
		# damn! a race condition occurs: the program can terminate and
		# SIGCHLD be delivered to the parent _before_ $pid was set!
		# maybe a little wait helps...
		select undef, undef, undef, 0.3;

		$SIG{'PIPE'} = 'DEFAULT';
		setpgrp;
		if($ext eq "mp2" || $ext eq "mp3") {
			exec "mp3toraw", $filename;
		} elsif($ext eq "ogg") {
			exec "ogg2raw", $filename;
		} elsif($ext eq "wav") {
			exec "splay", "-d", "-", $filename;
		} elsif($ext eq "pac") {
			exec "lpac2raw", $filename;
		} else {
			warn "no player for .$ext files.\n";
		}
		die "exec failed";
	}
	warn "pid=$pid\n";

	# wait until player is done or we get a connect on $killsock
	vec($rin, $killsock->fileno(), 1) = 1;
	while($pid) {
		if(select($rout = $rin, undef, undef, 0.1) == 1) {
			warn "got connection\n";

			# kill player
			$p = $pid;
			if($p) {
				warn "kill -KILL -$p\n";
				kill 'KILL', -$p
					or warn "kill -KILL -$p: $!\n";
			}

			# tell cdrplay to flush its buffers
			warn "kill -USR1 $cdrplaypid\n";
			kill 'SIGUSR1', $cdrplaypid
				or warn "kill -USR1 $cdrplaypid: $!\n";

			# accept the tcp connection; we close it later,
			# after a new song has been selected
			$killsock_conn = $killsock->accept();

			# write to log file
			logprintf("K %6d", $song_id);
		}
	}
	if(($pid_status || $pid_signal) && !$killsock_conn) {
		# write to log file
		logprintf("E %6d status=%d signal=%d", $song_id, $pid_status, $pid_signal);
	}

	if($debug) {
		($a, $b, $c, $d) = times;
		$childtime = $c + $d - $childtime;
		warn "song finished, time=$childtime\n";
	}

	# if it took less than 1 second to play it, pause for 1 second
	# to prevent us from eating 100% cpu time in case of misconfiguration
	if(time == $starttime) {
		sleep 1;
	}
}

sub logprintf($@) {
	my ($fmt, @args) = @_;

	# write to log file
	if(open LOG, ">>$logfile") {
		printf LOG "%s $fmt\n", scalar localtime, @args;
		close LOG;
	} else {
		warn "cannot open logfile $logfile: $!\n";
	}
}
