#!/usr/bin/perl
############################################################################
# soepkiptng (c) copyright 2000 Eric Lammerts <eric@lammerts.org>.
# $Id$
############################################################################
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# A copy of the GNU General Public License is available on the World Wide Web
# at `http://www.gnu.org/copyleft/gpl.html'.  You can also obtain it by
# writing to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
############################################################################

use integer;
use Cwd 'abs_path';
use DBI;
use Getopt::Std;

# find program directory
$_ = $0;
while(-l) {
	my $l = readlink or die "readlink $_: $!\n";
	if($l =~ m|^/|) { $_ = $l; } else { s|[^/]*$|/$l|; }
}
m|(.*)/|;
my $progdir = abs_path($1);

require "$progdir/soepkiptng.lib";

getopts('c:');

read_configfile(\%conf, $opt_c);

############################################################################


sub get_artist($$) {
	my ($num, $preprompt) = @_;
	my $arid;

	until($arid) {
		print "\n${preprompt}Enter artist$num search terms [$input]: ";
		$newinput = <STDIN>;
		$newinput =~ s/(.\10|\s+$)//g;
		$newinput =~ /\S/ and $input = $newinput;
		my @a = split(/\s+/, $input);
		scalar @a > 0 or next;

		my $q = "SELECT artist.id,artist.name FROM artist LEFT JOIN song ON song.artist_id=artist.id WHERE song.present AND " .
			join(" AND ", map { "artist.name LIKE ?" } @a) .
			" GROUP BY artist.id,artist.name ORDER BY artist.name";
		my @q = map { "%$_%" } @a;

		$sth = $dbh->prepare($q);
		$sth->execute(@q);

		my ($id, $name);
		my $i = 0;
		my @artistid;
		while(($id, $name) = $sth->fetchrow_array) {
			$i++;
			print "$i) $name\n";
			$artistid[$i] = $id;
			$artistname{$id} = $name;
		}
		$i or do {
			print "No matches.\n";
			next;
		};
		
		my $chosen;
		print "Select one of the above [1..$i] or nothing to repeat search: ";
		$chosen = <STDIN>;
		$arid = $artistid[$chosen];
	}
}


$| = 1;
$dbh = DBI->connect("DBI:$conf{db_type}:$conf{db_name}:$conf{db_host}",
	$conf{db_user}, $conf{db_pass}) or die "can't connect to database";

# cleanup seealso table first
foreach $id (qw/id1 id2/) {
	$q = "SELECT id1,id2 FROM seealso LEFT JOIN song ON seealso.$id=song.artist_id".
		" WHERE song.artist_id IS NULL";
	$sth = $dbh->prepare($q);
	$sth->execute();
	
	while(($id1, $id2) = $sth->fetchrow_array) {
		$dbh->do("DELETE FROM seealso WHERE id1=$id1 AND id2=$id2");
	}
	$sth->finish;
}

# then cleanup unused artist entries
$q = "SELECT artist.id FROM artist LEFT JOIN song ON artist.id=song.artist_id".
	" WHERE song.id IS NULL";
$sth = $dbh->prepare($q);
$sth->execute();

while(($id) = $sth->fetchrow_array) {
	$dbh->do("DELETE FROM artist WHERE id=$id");
}
$sth->finish;


$ar1 = get_artist(1, "");
$ar2 = get_artist(2, "(Artist1=$artistname{$ar1})\n");

print <<EOF;
Adding SeeAlso entry for:
- $artistname{$ar1}
- $artistname{$ar2}
EOF

# delete old entries
$dbh->do("DELETE FROM seealso WHERE id1=$ar1 AND id2=$ar2") or die;

# add entry
$dbh->do("REPLACE INTO seealso SET id1=$ar1, id2=$ar2") or die;

# delete other entry that means the same
$dbh->do("DELETE FROM seealso WHERE id1=$ar2 AND id2=$ar1") or die;

$dbh->disconnect;


