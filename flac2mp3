#!/usr/bin/perl

############################################################################
# soepkiptng (c) copyright 2000 Eric Lammerts <eric@lammerts.org>.
############################################################################
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# A copy of the GNU General Public License is available on the World Wide Web
# at `http://www.gnu.org/copyleft/gpl.html'.  You can also obtain it by
# writing to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
############################################################################

# CONFIG

my $progdir;
BEGIN {
	use Cwd qw'cwd abs_path';

	# find program directory
	$_ = $0;
	while(-l) {
		my $l = readlink or die "readlink $_: $!\n";
		if($l =~ m|^/|) { $_ = $l; } else { s|[^/]*$|/$l|; }
	}
	m|(.*)/|;
	$progdir = abs_path($1);

	unshift @INC, "$progdir/lib";
}
use Getopt::Std;
use DBI;

require "$progdir/soepkiptng.lib";

$ENV{PATH} = "$progdir/bin:$ENV{PATH}";
use lib "$progdir/lib";

getopts('dc:p:b:ho:O:');

$opt_h and die <<EOF;

Usage: flac2mp3 [-d] [-p flac_binary] [-b bitrate] [-c configfile] file...

-d            : delete original after successful conversion
-b bitrate    : kbitrate to encode to (default v0)
-c configfile : override soepkiptng config file
-O outputfile : specify output file

EOF

read_configfile(\%conf, $opt_c);

$bitrate = $opt_b || "v0";
$flac = $opt_p || "flac";
$cwd = cwd;

$| = 1;

$dbh = connect_to_db(\%conf);

foreach $flacfile (@ARGV) {
	next if -d $flacfile;

	$flacfile =~ s~^(.*/)?(.*)~abs_path($1 || ".") . "/$2"~e;

	$q = "SELECT title,artist.name,album.name,track" .
	     " FROM song,artist,album" .
	     " WHERE song.artist_id=artist.id AND song.album_id=album.id" .
	     " AND present AND filename=?";
	$sth = $dbh->prepare($q);
	$sth->execute($flacfile)
		or die "can't do sql command: " . $dbh->errstr;

	my ($ti, $ar, $al, $tr) = $sth->fetchrow_array or do {
		warn "$flacfile: not found in dbase\n";
	};

	my $mp3file = $flacfile;
	$mp3file =~ s/\.\w+$//;
	$mp3file .= ".mp3";
	$opt_o and $mp3file =~ s|.*/|$opt_o/|;
	$mp3file = $opt_O if defined $opt_O;

	if(-e $mp3file) {
		warn "$mp3file exists, skipping.\n";
		next;
	}

	my @lamecmd = qw/lame -r -s 44.1 --add-id3v2 --pad-id3v2/;
	push @lamecmd, "--id3v2-only";
	#push @lamecmd, "--ty", 1991;
	if($bitrate =~ /^(\d+)/) {
		push @lamecmd, "--abr", $bitrate;
	} elsif($bitrate =~ /^(v\d+)/) {
		push @lamecmd, uc("-$1"), "--vbr-new";
	} else {
		die "invalid bitrate: $bitrate\n";
	}
	if($ti) { push @lamecmd, "--tt", $ti; }
	if($ar) { push @lamecmd, "--ta", $ar; }
	if($al) { push @lamecmd, "--tl", $al; }
	if($tr) { push @lamecmd, "--tn", $tr; }

	if(open(STDIN, "-|") == 0) {
		exec $flac, qw/-sdc --endian=little --sign=signed --force-raw-format/,
			$flacfile;
		die "$flac: $!\n";
	}

	system @lamecmd, '-', "$mp3file.tmp";

	if($?) {
		warn "$flacfile: $flac failed.\n";
		close STDIN;
		unlink "$mp3file.tmp" or warn "delete $mp3file.tmp: $!\n";
                if(($? & 0x7f) == 2) { die "aborted.\n"; }
		next;
	}
	close STDIN;
	if($?) {
		warn "$flacfile: $flac -d failed.\n";
		unlink "$mp3file.tmp" or warn "delete $mp3file.tmp: $!\n";
                if(($? & 0x7f) == 2) { die "aborted.\n"; }
		next;
	}

	if(-e $mp3file) {
		warn "$mp3file exists, skipping.\n";
		unlink "$mp3file.tmp" or warn "delete $mp3file.tmp: $!\n"; 
		next;
	}
	rename "$mp3file.tmp", $mp3file or do {
		warn "rename $mp3file.tmp -> $mp3file: $!\n";
		unlink "$mp3file.tmp" or warn "delete $mp3file.tmp: $!\n"; 
		next;
	};
	if($opt_d) {
		unlink $flacfile or warn "unlink $flacfile: $!\n";
	}
}
