#!/usr/bin/perl
############################################################################
# soepkiptngd_mobile (Soepkip The Next Generation daemon, Mobile version)
#
# (c) copyright 2001 Eric Lammerts <eric@lammerts.org>
#
# $Id$
############################################################################
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2, as 
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# A copy of the GNU General Public License is available on the World Wide Web
# at `http://www.gnu.org/copyleft/gpl.html'.  You can also obtain it by
# writing to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
############################################################################

# fork, and start soepkiptngd
# fork, and start funkey handler
# wait until soepkip is playing stuff, or timeout (timeout is needed when no preload is available)
# exec /sbin/init

use integer;
use Audio::Mixer;
use Cwd 'abs_path';
use DBI;
use Getopt::Std;
use Socket;

# find program directory
$_ = $0;
while(-l) {
	my $l = readlink or die "readlink $_: $!\n";
	if($l =~ m|^/|) { $_ = $l; } else { s|[^/]*$|/$l|; }
}
m|(.*)/|;
my $progdir = abs_path($1);

require "$progdir/soepkiptng.lib";

getopts('c:');

read_configfile(\%conf, $opt_c);

$mixerchannel = 'pcm';

sub numtext($)
{
	return join(" ", split(//, $_[0]));
}

sub open_db() {
	# (re)open database connection if necessary
	if(!$dbh) {
		$dbh = DBI->connect("DBI:mysql:$conf{db_name}:$conf{db_host}",
			$conf{db_user}, $conf{db_pass}) or do {

			warn "Can't connect to database $conf{db_name}" .
			     "\@$conf{db_host} as user $conf{db_user}\n";
			return undef;
		};
	}
	return 1;
}

sub playlist_clear() {
	open_db() or return;
	$dbh->do("DELETE FROM queue");
	warn "playlist cleared.\n";
}

sub open_db_getnow() {
	open_db() or return;
	my $now = get_nowplaying($dbh) or do {
		warn "no now!\n";
		return;
	};
	warn "now->{id}=$now->{id}\n";
	return $now;
}

sub playlist_addall_artist() {
	my $now = open_db_getnow() or return;

	my $songsref = $dbh->selectcol_arrayref(
		"SELECT id FROM song WHERE present AND filename LIKE '/%' AND ".
		"artist_id=$now->{arid} AND id != $now->{id} AND ".
                "unix_timestamp(now()) - unix_timestamp(last_played) > ".
		"$conf{min_random_time} ORDER BY RAND()");
	warn "adding songs: " . join(",", @{$songsref}) . ".\n";
	return if @{$songsref} == 0;
	add_song($dbh, '', @{$songsref});
}

sub playlist_addall_album($) {
	my ($alltracks) = @_;

	my $now = open_db_getnow() or return;
	$now->{track} = -1 if $alltracks;

	my $songsref = $dbh->selectcol_arrayref(
		"SELECT song.id FROM song,album WHERE present AND filename LIKE '/%' AND ".
		"song.album_id=album.id AND album.name <> '' AND ".
		"album_id=$now->{alid} AND song.id != $now->{id} AND ".
		"track > $now->{track} AND ".
                "unix_timestamp(now()) - unix_timestamp(last_played) > ".
		"$conf{min_random_time} ORDER BY track");
	warn "adding songs: " . join(",", @{$songsref}) . ".\n";
	return if @{$songsref} == 0;
	add_song($dbh, '', @{$songsref});
}

sub shuffle() {
	open_db() or return;
	shuffle_queue($dbh);
	warn "shuffle\n";
}

# return higest of (left, right) volume
sub getvol() {
	my ($l, $r) = Audio::Mixer::get_cval($mixerchannel);
	return $l > $r? $l : $r;
}

sub setvol($;$) {
	my ($incr, $abs) = @_;

	if($muted) {
		if($incr > 0) {
			$muted = 0;
		} elsif($incr < 0) {
			$volume += $incr;
			return;
		}
	} else {
		$volume = getvol() + $incr;
		warn "volume=$volume\n";
	}

	if($incr == 0) { $muted = !$muted; }
	if($abs) { $volume = $incr; $muted = 0; }

	if($volume > 100) { $volume = 100; }
	if($volume < 0) { $volume = 0; }

	warn "setting volume, volume=$volume, muted=$muted\n";
	say("volume " . numtext($volume)) if $debug;
	Audio::Mixer::set_cval($mixerchannel, ($muted? 0 : $volume));
}

sub killsong() {
	my $iaddr   = inet_aton($killhost) or return;
	$paddr   = sockaddr_in($killport, $iaddr);

	say("kill song $keypadvalue") if $debug;
	if($keypadvalue && open_db()) {
		$dbh->do("LOCK TABLES queue WRITE, song READ");
		my $res = $dbh->selectall_arrayref(
			"SELECT song_id,song.track FROM queue " .
			"LEFT JOIN song ON queue.song_id=song.id " .
			"ORDER BY song_order");
		my @goners;
		foreach(@$res) {
			last if $_->[1] == $keypadvalue;
			push @goners, $_->[0];
		}
		warn sprintf "deleting songs up to track %d: %s\n", $keypadvalue, join(",", @goners);
		del_song($dbh, @goners);
		$dbh->do("UNLOCK TABLES");
		digit_reset();
	}

	socket SOCK, PF_INET, SOCK_STREAM, getprotobyname('tcp')
		or return;
	connect SOCK, $paddr
		or return;
	warn "killed song.\n";
	close SOCK;
}

sub killdelete() {
	local *ST;
	my $filename;

	open ST, $conf{statusfile} or return;
	chop((undef, $filename) = <ST>);
	close ST;

	unlink $filename and killsong();
}

sub digit($) {
	$keypadvalue *= 10;
	$keypadvalue += $_[0];
	push @keypadvalues, $_[0];
	warn "keypadvalue=$keypadvalue\n";
}

sub digit_reset() {
	$keypadvalue = 0;
	@keypadvalues = ();
	warn "digit_reset\n";
}

sub playlist() {
	my $reboots = 0;
	my $killdelete = 0;
	foreach(@keypadvalues) {
		say("dot command $_") if $debug;
		if($_ == 0) {
		}
		elsif($_ == 1) {
			shuffle();
		}
		elsif($_ == 2) {
			playlist_addall_album(1);
		}
		elsif($_ == 3) {
			playlist_addall_album(0);
		}
		elsif($_ == 4) {
			playlist_addall_artist();
		}
		elsif($_ == 5) {
			$debug++;
			if($debug == 3) { $debug = 0; }
			say("deebug $debug");
		}
		elsif($_ == 6) {
			$killdelete++;
		}
		elsif($_ == 7) {
			$reboots++;
		}
		elsif($_ == 8) {
			sayit();
		}
		elsif($_ == 9) {
			playlist_clear();
		}
	}
	digit_reset();
	if($reboots >= 3) {
		say("reboot") if $debug;
		warn "sync\n";
		system "sync";
		sleep 2;
		warn "reboot -nf\n";
		system "reboot -nf";
	}
	if($killdelete >= 3) {
		say("kill and delete") if $debug;
		killdelete();
	}
}

sub prepare_word($) {
	my ($t) = @_;

	my $wavfile = "/tmp/soepkiptngd_mobile_say_$t.wav";
	warn "say wavfile=$wavfile\n";

	my $tmpfile = "/tmp/soepkiptngd_mobile_say.wav";
	unlink $tmpfile;
	symlink $wavfile, $tmpfile;

	if(! -f $wavfile) {
		local *F;
		open F, "| text2wave -scale 5 -F 44100 -o $tmpfile";
		print F "$t\n";
		close F;
	}
	warn "wavfile size=" . (-s $wavfile) . " bytes.\n";
	return $wavfile;
}

sub say($;$) {
	my ($t, $dontsplit) = @_;
	my @words;
	if($dontsplit) {
		@words = ($t);
	} else {
		@words = split /\s+/, $t;
	}

	# pause _before_ doing text2speech (to speed it up)
	warn "kill -USR2 $cdrplaypid\n";
	kill 'USR2', $cdrplaypid;	# pause: make it close /dev/dsp

	my @wavs;
	foreach(@words) {
		push @wavs, prepare_word($_);
	}
	open PL, "|cdrplay -w";
	foreach(@wavs) {
		my $pid;
		if(($pid = fork) == 0) {
			open STDOUT, ">&PL" or die;
			exec "wav2raw", $_;
		}
		waitpid $pid, 0;
	}
	close PL;

	warn "kill -HUP $cdrplaypid\n";
	kill 'HUP', $cdrplaypid;	# resume
	unlink $tmpfile;
}

sub sayit() {
	my $now = get_nowplaying($dbh) or do {
		warn "no now!\n";
		return;
	};

	my $t = "$now->{artist} ... $now->{title}";
	$t =~ s|/| |g;
	say($t, 1);
}
	
sub request() {
	open_db() or return;

	say("request song " . numtext($keypadvalue))
		if $debug;
	add_song($dbh, '', $keypadvalue);
	warn "adding song: $keypadvalue.\n";
	digit_reset();
}

sub request_album() {
	my $alid = $keypadvalue;
	open_db() or return;

	my $songsref = $dbh->selectcol_arrayref(
		"SELECT song.id FROM song,album WHERE present AND filename LIKE '/%' AND ".
		"song.album_id=album.id AND album.id=$alid ".
		"ORDER BY track");
	digit_reset();
	warn "adding songs: " . join(",", @{$songsref}) . ".\n";
	return if @{$songsref} == 0;
	say("request album " . numtext($alid) .
	    " found " . numtext(scalar @{$songsref}))
		if $debug;
	add_song($dbh, '', @{$songsref});
	warn "adding song: @{$songsref}.\n";
}

sub request_artist() {
	my $arid = $keypadvalue;
	open_db() or return;

	my $songsref = $dbh->selectcol_arrayref(
		"SELECT song.id FROM song,artist WHERE present AND filename LIKE '/%' AND ".
		"song.artist_id=artist.id AND artist.id=$arid ".
		"ORDER BY track");
	digit_reset();
	warn "adding songs: " . join(",", @{$songsref}) . ".\n";
	say("request artist " . numtext($arid) .
	    " found " . numtext(scalar @{$songsref}))
		if $debug;
	return if @{$songsref} == 0;
	add_song($dbh, '', @{$songsref});
	warn "adding song: @{$songsref}.\n";
}

sub funkeyd() {
	warn "funkeyd cdrplaypid=$cdrplaypid k=$killhost:$killport\n";
	local *F;

	my $keynum = 89;
	print STDERR "settings keycodes:";
	my $loadkeys_input;
	foreach(keys %conf) {
		next unless /^funkey_(\d+)$/;
		$keynum < 128 or die "too many funkeys defined!\n";
		$loadkeys_input .= sprintf "  keycode %d = U+%04x\n", $1, 0xfe00 + $keynum;
		print STDERR " $1=>$keynum";
		$scancode{$keynum} = $1;
		$funkey_handle{$keynum} = $conf{$_};
		$keynum++;
	}
	warn "---\n$loadkeys_input---\n";
	warn "loadkeys\n";
	if(open(F, "|-") == 0) {
		$ENV{'PATH'} = $mypath;
		setpgrp;
		exec 'loadkeys', '-';
		die "loadkeys: $!\n";
	}
	print F $loadkeys_input;
	warn "\nloadkeys wait\n";
	close F;

	warn "funkey fork\n";
	if(fork == 0) {
		setpgrp;
		$ENV{'PATH'} = $mypath;
		open LOGERR, ">>/tmp/soepkiptngd_mobile.out";
		$SIG{__WARN__} = sub {
			my $msg = $_[0];
			$msg =~ s/\n/\r\n/g;
			print STDERR $msg;
			printf LOGERR "%s %s",
				scalar localtime, $msg;
		};

		Audio::Mixer::init_mixer();
		open F, "/dev/funkey" or die "/dev/funkey: $!\n";
		for(;;) {
			sysread F, $key, 1;
			$key = unpack "C", $key;

			# skip autorepeated keys
			next if $key == $prevkey;
			$prevkey = $key;

			# don't act on releasing a key
			next if $key & 0x80;

			if(time - $lastkeytime > 10) {
				# timeout
				warn "timeout -> digit_reset()\n";
				digit_reset();
			}
			$lastkeytime = time;

			warn "scancode $scancode{$key} keynum $key action $funkey_handle{$key}!\n";
			eval $funkey_handle{$key};
		}
	}
}

sub wait_for_soepkiptng() {
	local *ST;

	$starttime = time;
	while((time - $starttime) < 15) {
		if(open ST, $conf{statusfile}) {
			chop((undef, undef, undef, $cdrplaypid, $killhost, $killport) = <ST>);
			close ST;
			last if $cdrplaypid && $killhost && $killport;
		}
		sleep 1;
	}
}


### MAIN ###

$SIG{__WARN__} = sub {
	my $msg = $_[0];
	$msg =~ s/\n/\r\n/g;
	print STDERR $msg;
};

$mypath = "/bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin:/usr/local/sbin:$progdir:$progdir/bin";
warn "path=$mypath\n";

warn "volume\n";
setvol($conf{volume_init}, 1) if $conf{volume_init};

if($$ == 1) {
	warn "fork\n";
	if(fork == 0) {
		setpgrp;
		$ENV{'PATH'} = $mypath;
		open LOGERR, ">>/tmp/soepkiptngd_mobile.out";
		$SIG{__WARN__} = sub {
			print STDERR $_[0];
			printf LOGERR "%s %s",
				scalar localtime, $_[0];
		};

		warn "hdparm -u1 -m16 -X66 -d1 /dev/hda\n";
		system "hdparm -u1 -m16 -X66 -d1 /dev/hda";
		warn "ifconfig lo\n";
		system "ifconfig lo 127.0.0.1";
		warn "hostname -F /etc/hostname\n";
		system "hostname -F /etc/hostname";

		warn "unlink $conf{statusfile}\n";
		unlink $conf{statusfile};

		warn "starting soepkiptngd\n";
		exec 'sched', 'soepkiptngd', '-d';
		warn "sched: $!\n";
		exec 'soepkiptngd', '-d';
		warn "soepkiptngd: $!\n";
		exec "$progdir/soepkiptngd", '-d';
		die "$progdir/soepkiptngd: $!\n";
	}

	warn "wait_for_soepkiptng\n";
	wait_for_soepkiptng;
} else {
	local *ST;
	if(open ST, $conf{statusfile}) {
		chop((undef, undef, undef, $cdrplaypid, $killhost, $killport) = <ST>);
		close ST;
	}
}
warn "killhost=$killhost:$killport\n";

warn "funkeyd\n";
funkeyd;

# for testing
exit if $$ != 1;

sleep 1;

exec "/sbin/init";
warn "/sbin/init: $!\n";

exec "/bin/sh";
warn "/bin/sh: $!\n";

# nothing else we can do
for(;;) { }

