############################################################################
# soepkiptng (c) copyright 2000 Eric Lammerts <eric@lammerts.org>.
############################################################################
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2, as 
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# A copy of the GNU General Public License is available on the World Wide Web
# at `http://www.gnu.org/copyleft/gpl.html'.  You can also obtain it by
# writing to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
############################################################################

use IO::Socket;
use Socket;
use POSIX qw(locale_h);

setlocale(LC_CTYPE, "en_US.ISO-8859-1");

my @globalconfigfiles = ($ENV{SOEPKIPTNG_CONFIGFILE},
   "$ENV{HOME}/.soepkiptng.conf", "/etc/soepkiptng.conf");

sub read_configfile1($$);

sub read_configfile1($$) {
	my ($conf, $cf) = @_;
	local *F;

	open F, $cf or return undef;
	while(<F>) {
		/^#/ and next;
		s/\s+$//;
		/./ or next;
		if(/^include\s+(.*\S)/) {
			read_configfile1($conf, $1);
			next;
		}
		if(/^(\w[-.\w]*)\s*=\s*(.*?)\s*$/) {
			$f = lc $1;
			$conf->{$f} = $2;
		} elsif(/^\s+(.*?)\s*$/) {
			# continuation line
			$conf->{$f} .= "\n$1";
		} else {
			die "$cf line $.: invalid format\n";
		}
	}
	close F;
	return 1;
}

sub read_configfile($;@) {
	my ($conf, @extraconfigfiles) = @_;
	my $cf;

	foreach $cf ((@extraconfigfiles, @globalconfigfiles)) {
		defined($cf) and read_configfile1($conf, $cf) and return;
	}
	die sprintf "no configuration file found (tried %s)\n",
		join(" ", @extraconfigfiles, @globalconfigfiles);
}

%latin9_to_ascii = (
	128 => '_', 129 => '_', 130 => '_', 131 => '_',
	132 => '_', 133 => '_', 134 => '_', 135 => '_',
	136 => '_', 137 => '_', 138 => '_', 139 => '_',
	140 => '_', 141 => '_', 142 => '_', 143 => '_',
	144 => '_', 145 => '_', 146 => '_', 147 => '_',
	148 => '_', 149 => '_', 150 => '_', 151 => '_',
	152 => '_', 153 => '_', 154 => '_', 155 => '_',
	156 => '_', 157 => '_', 158 => '_', 159 => '_',
	160 => '_',		# no-break space
	161 => '_',		# ¡ inverted exclamation mark
	162 => 'c',		# ¢ cent sign
	163 => 'L',		# £ pound sign
	164 => 'EUR',		# ¤ euro sign
	165 => 'Y',		# ¥ yen sign
	166 => 'S',		# ¦ latin capital letter s with caron
	167 => '_',		# § section sign
	168 => 's',		# ¨ latin small letter s with caron
	169 => 'C',		# © copyright sign
	170 => 'a',		# ª feminine ordinal indicator
	171 => '_',		# « left-pointing double angle quotation mark
	172 => '_',		# ¬ not sign
	173 => '_',		# ­ soft hyphen
	174 => 'R',		# ® registered sign
	175 => '_',		# ¯ macron
	176 => 'o',		# ° degree sign
	177 => '_',		# ± plus-minus sign
	178 => '2',		# ² superscript two
	179 => '3',		# ³ superscript three
	180 => 'Z',		# ´ latin capital letter z with caron
	181 => 'u',		# µ micro sign
	182 => '_',		# ¶ pilcrow sign
	183 => '_',		# · middle dot
	184 => 'z',		# ¸ latin small letter z with caron
	185 => '1',		# ¹ superscript one
	186 => 'o',		# º masculine ordinal indicator
	187 => '_',		# » right-pointing double angle quotation mark
	188 => 'OE',		# ¼ latin capital ligature oe
	189 => 'oe',		# ½ latin small ligature oe
	190 => 'IJ',		# ¾ latin capital letter y with diaeresis
	191 => '_',		# ¿ inverted question mark
	192 => 'A',		# capital A, grave accent
	193 => 'A',		# capital A, acute accent
	194 => 'A',		# capital A, circumflex accent
	195 => 'A',		# capital A, tilde
	196 => 'A',		# capital A, dieresis or umlaut mark
	197 => 'A',		# capital A, ring
	198 => 'AE',		# capital AE diphthong (ligature)
	199 => 'C',		# capital C, cedilla
	200 => 'E',		# capital E, grave accent
	201 => 'E',		# capital E, acute accent
	202 => 'E',		# capital E, circumflex accent
	203 => 'E',		# capital E, dieresis or umlaut mark
	204 => 'I',		# capital I, grave accent
	205 => 'I',		# capital I, acute accent
	206 => 'I',		# capital I, circumflex accent
	207 => 'I',		# capital I, dieresis or umlaut mark
	208 => '_',		# Ð latin capital letter eth
	209 => 'N',		# capital N, tilde
	210 => 'O',		# capital O, grave accent
	211 => 'O',		# capital O, acute accent
	212 => 'O',		# capital O, circumflex accent
	213 => 'O',		# capital O, tilde
	214 => 'O',		# capital O, dieresis or umlaut mark
	215 => 'x',		# ×, multiplication sign
	216 => 'O',		# capital O, slash
	217 => 'U',		# capital U, grave accent
	218 => 'U',		# capital U, acute accent
	219 => 'U',		# capital U, circumflex accent
	220 => 'U',		# capital U, dieresis or umlaut mark
	221 => 'Y',		# capital Y, acute accent
	222 => '_',		# Þ latin capital letter thorn
	223 => 'ss',		# small sharp s, German (sz ligature)
	224 => 'a',		# small a, grave accent
	225 => 'a',		# small a, acute accent
	226 => 'a',		# small a, circumflex accent
	227 => 'a',		# small a, tilde
	228 => 'a',		# small a, dieresis or umlaut mark
	229 => 'a',		# small a, ring
	230 => 'ae',		# small ae diphthong (ligature)
	231 => 'c',		# small c, cedilla
	232 => 'e',		# small e, grave accent
	233 => 'e',		# small e, acute accent
	234 => 'e',		# small e, circumflex accent
	235 => 'e',		# small e, dieresis or umlaut mark
	236 => 'i',		# small i, grave accent
	237 => 'i',		# small i, acute accent
	238 => 'i',		# small i, circumflex accent
	239 => 'i',		# small i, dieresis or umlaut mark
	240 => '_',		# ð latin small letter eth
	241 => 'n',		# small n, tilde
	242 => 'o',		# small o, grave accent
	243 => 'o',		# small o, acute accent
	244 => 'o',		# small o, circumflex accent
	245 => 'o',		# small o, tilde
	246 => 'o',		# small o, dieresis or umlaut mark
	247 => '_',		# ÷ division sign
	248 => 'o',		# small o, slash
	249 => 'u',		# small u, grave accent
	250 => 'u',		# small u, acute accent
	251 => 'u',		# small u, circumflex accent
	252 => 'u',		# small u, dieresis or umlaut mark
	253 => 'y',		# small y, acute accent
	254 => '_',		# þ latin small letter thorn
	255 => 'ij',		# small y, dieresis or umlaut mark
);

sub string_to_filename($;$) {
	my ($a, $lang) = @_;

	my $ampr = $lang eq "dut"? "en" : $lang eq "fre"? "et" : $lang eq "ger"? "und" : "and";

	$a =~ s/-/_/g;
	$a =~ s/[\[(](.*)/-$1/;
	$a =~ s/[ _]?&[_ ]?/_${ampr}_/g;
	$a =~ s/([\x80-\xff])/lc($latin9_to_ascii{ord($1)}) || $1/ge;
	$a =~ s/[^-A-Za-z0-9]+/_/g;
	$a =~ s/_?-_?/-/g;
	$a =~ s/_$//;
	return lc($a);
}

sub encurl($) {
	my ($a) = @_;

	$a =~ s|([^-./\w])|sprintf "%%%02x", ord($1)|ge;
#	$a =~ s| |+|g;
	$a;
}

sub enchtml($;$) {
	my ($a, $do_nbsp) = @_;

	$a =~ s|&|&amp;|g;
	$a =~ s|"|&quot;|g;
	$a =~ s|<|&lt;|g;
	$a =~ s|>|&gt;|g;
	$a =~ s| |&nbsp;|g if $do_nbsp;
	$a;
}

sub del_song($$@) {
	my ($db, $tbl, @ids) = @_;
	@ids or return;
	$db->do("DELETE FROM $tbl WHERE song_id=" . join(" OR song_id=", @ids));
}

sub add_song_nolock($$$$@) {
	my ($db, $tbl, $order, $user, @ids) = @_;

	@ids or return;
	my $firstid = shift @ids;
	my $q = "INSERT INTO $tbl (song_order, song_id, user) " .
		"VALUES ($order, $firstid, \"$user\")";
	foreach(@ids) {
		$order++;
		$q .= ",($order,$_,\"$user\")";
	}
	$db->do($q) or return undef;
	return 1;
}

sub get_table_ids($$$) {
	my ($db, $tbl, $rest) = @_;

	my $res = $db->selectcol_arrayref("SELECT song_id FROM $tbl $rest");
	return @$res;
}


sub add_song($$$@) {
	my ($db, $tbl, $user, @ids) = @_;

	$db->do("LOCK TABLES $tbl WRITE");
	del_song($db, $tbl, @ids);
	my ($order) = $db->selectrow_array("SELECT MAX(song_order) FROM $tbl");
	$order = 0 if $order < 0;
	my $retval = add_song_nolock($db, $tbl, $order + 1, $user, @ids);
	$db->do("UNLOCK TABLES");
	return $retval;
}

sub reorder_table($$$@) {
	my ($db, $tbl, $order, @ids) = @_;

	foreach(@ids) {
		$db->do("UPDATE $tbl SET song_order=$order WHERE song_id=$_");
		$order++;
	}
}

sub move_song_to_top($$@) {
	my ($db, $tbl, @ids) = @_;

	$db->do("LOCK TABLES $tbl WRITE");
	reorder_table($db, $tbl, $#ids + 2, get_table_ids($db, $tbl, "ORDER BY song_order"));
	reorder_table($db, $tbl, 1, @ids);
	$db->do("UNLOCK TABLES");
}

sub move_song_to_bottom($$@) {
	my ($db, $tbl, @ids) = @_;
	my %ids;

	foreach(@ids) { $ids{$_} = 1; };
	$db->do("LOCK TABLES $tbl WRITE");
	my @q = get_table_ids($db, $tbl, "ORDER BY song_order");
	my (@q1, @q2);
	foreach(@q) {
		if($ids{$_}) { push @q2, $_; } else { push @q1, $_; }
	}
	reorder_table($db, $tbl, 1, @q1, @q2);
	$db->do("UNLOCK TABLES");
}

sub shuffle_table($$) {
	my ($db, $tbl) = @_;

	$db->do("LOCK TABLES $tbl WRITE");
	reorder_table($db, $tbl, 1, get_table_ids($db, $tbl, "ORDER BY rand()"));
	$db->do("UNLOCK TABLES");
}

sub kill_song(;$$) {
	my ($user, $id) = @_;
	my ($plid, $host, $port);
	local *F;

	open F, $conf{statusfile}
		or die "$conf{statusfile}: $!\n";
	$plid = <F>;
	<F>; <F>; <F>;
	chop($host = <F>);
	$port = <F>;
	close F;

	if(defined($id) && $id != $plid) { return undef; }

	if($conf{kill_song_external}) {
		system $conf{kill_song_external}, $user || '';

		open F, $conf{statusfile}
			or die "$conf{statusfile}: $!\n";
		my @lines;
		chop(@lines = <F>);
		close F;
		return @lines;
	}
	return kill_song_internal($host, $port);
}

sub kill_song_internal($$) {
	my ($host, $port) = @_;
	local *F;

	$host && $port or return undef;

	socket(F, PF_INET, SOCK_STREAM, getprotobyname('tcp'))
		or die "socket: $!\n";
	connect(F, sockaddr_in($port, inet_aton($host)))
		or die "connect $host:$port: $!\n";
	my @status;
	@status = <F>;
	close F;
	return @status;
}

sub player_cmd(;@) {
	my $res = 1;
	local *F;
	my $host;

	open F, $conf{statusfile}
		or die "$conf{statusfile}: $!\n";
	<F>; <F>; <F>; <F>;
	chop($host = <F>);
	close F;

	my $sock = IO::Socket::INET->new("$host:2222") or return undef;
	$sock->autoflush(1);
	$response = <$sock>;	#greeting
	foreach(@_) {
		$sock->print("$_\n");
		$res = 0 if <$sock> !~ /^\+/;
	}
	$sock->close;
	return $res;
}


sub get_player_pid() {
	local *F;
	my $pid;

	open F, $conf{statusfile}
		or die "$conf{statusfile}: $!\n";
	<F>; <F>; <F>;
	$pid = 0 + <F>;
	close F;
	return $pid;
}

sub get_id($$$) {
	my ($db, $table, $value) = @_;

	my $sth = $db->prepare("SELECT id,name FROM $table WHERE binary name=?");
	if($sth->execute($value || "") >= 1) {
		my ($id, $v) = $sth->fetchrow_array;
		return $id;
	} else {
		$db->do("REPLACE INTO $table SET name=?", undef, $value)
			or die;
		return $db->{'mysql_insertid'};
	}
}

sub get_playlist_contents($$) {
	my ($dbh, $list) = @_;
	my %songids;
	my (%artistids, %albumsids, %listids);
	my (%artistids_done, %albumsids_done, %listids_done);

	my $sth_list = $dbh->prepare("SELECT type,entity_id" .
		" FROM list_contents WHERE list_id=?");
	my $sth_artist = $dbh->prepare("SELECT id FROM song WHERE artist_id=?");
	my $sth_album = $dbh->prepare("SELECT id FROM song WHERE album_id=?");
	
	$listids{$list} = 1;
	while(%artistids || %albumsids || %listids) {
		foreach(keys %listids) {
			$listids_done{$_} = 1;
			delete $listids{$_};

			$sth_list->execute($_);
			while($_ = $sth_list->fetchrow_hashref) {
				if($_->{'type'} eq 'list') {
					next if $listids_done{$_->{'entity_id'}};
					$listids{$_->{'entity_id'}} = 1;
				} elsif($_->{'type'} eq 'artist') {
					next if $artistids_done{$_->{'entity_id'}};
					$artistids{$_->{'entity_id'}} = 1;
				} elsif($_->{'type'} eq 'album') {
					next if $albumids_done{$_->{'entity_id'}};
					$albumids{$_->{'entity_id'}} = 1;
				} elsif($_->{'type'} eq 'song') {
					$songids{$_->{'entity_id'}} = 1;
				}
			}
		}
		foreach(keys %artistids) {
			$artistids_done{$_} = 1;
			delete $artistids{$_};

			$sth_artist->execute($_);
			while($_ = $sth_artist->fetchrow_hashref) {
				$songids{$_->{'id'}} = 1;
			}
		}
		foreach(keys %albumids) {
			$albumids_done{$_} = 1;
			delete $albumids{$_};

			$sth_album->execute($_);
			while($_ = $sth_album->fetchrow_hashref) {
				$songids{$_->{'id'}} = 1;
			}
		}
	}
	return keys %songids;
}

sub get_nowplaying(;$) {
	my ($dbh) = @_;
	local *F;
	my $s = undef;

	open F, $conf{statusfile} or return undef;
	chop (($s->{id}, $s->{filename}, $s->{pid}, $s->{cdrplaypid},
	       $s->{killhost}, $s->{killport}, $s->{type},
	       $s->{user}, $s->{artist}, $s->{title}, $s->{album},
	       $s->{track}, $s->{length}, $s->{encoding},
	       $s->{artisturl}, $s->{albumurl}, $s->{titleurl}) = <F>);
	close F;

	if($dbh) {
		my $sth = $dbh->prepare(
			"SELECT artist.name as artist,album.name as album," .
			" song.artist_id as arid,song.album_id as alid, song.*" .
			" FROM song,artist,album WHERE song.artist_id=artist.id" .
			" AND song.album_id=album.id AND song.id=?");
		$sth->execute($s->{id});
		if(my $d = $sth->fetchrow_hashref) {
			$s->{alid} = $d->{alid};
			$s->{arid} = $d->{arid};
			$s->{filename} = $d->{filename};
			$s->{artist} = $d->{artist};
			$s->{title} = $d->{title};
			$s->{album} = $d->{album};
			$s->{track} = $d->{track};
			$s->{length} = $d->{length};
			$s->{encoding} = $d->{encoding};
		}
	}
	return $s;
}

sub construct_url($@) {
	my ($baseurl, $argsref) = @_;
	my $sep = "?";
	foreach(keys %$argsref) {
		$baseurl .= "$sep$_=" . encurl($$argsref{$_});
		$sep = "&";
	}
	return $baseurl;
}

sub cleanup_name {
	use locale;
	my ($s) = @_;
	$s =~ s/\.mp3\s*$//i;
	$s =~ s/%([0-9a-f][0-9a-f])/chr(hex($1))/eig;
	$s =~ s/([a-zA-Z])([A-Z][a-z])/$1 $2/g;
	$s = lc($s);
	$s =~ s/_/ /g;
	if($s !~ / /) { $s =~ s/\./ /g; }
	$s =~ s/^\s+|\s+$//g;
	$s =~ s/([^'\w\xc0-\xff]|^)(\w)/$1\U$2/g;
	$s =~ s/\b(o'\w)/\U$1/ig;
	$s =~ s/n T\b/n't/g;
	$s =~ s/ S\b/'s/g;
	$s =~ s/\bI M\b/I'm/g;
	$s =~ s/ ll\b/'ll/ig;
	$s =~ s/\b(i+)\b/\U$1/ig;
	$s =~ s/([eiuy]) ([rv]e)\b/$1'\L$2/ig;
	$s =~ s/\s*-\s*/ - /g;
	$s;
}

sub add_song_next($$$;$) {
	my ($dbh, $table, $currentsong, $user) = @_;

	my $ids = $dbh->selectcol_arrayref("SELECT song_id FROM $table,song ".
		"WHERE $table.song_id=song.id AND song.present");
	my %idsq;
	foreach(@$ids) { $idsq{$_} = 1; }

	my $sth = $dbh->prepare("SELECT song2.* FROM song AS song1,".
		" song AS song2 WHERE song1.id=$currentsong AND".
		" song1.artist_id = song2.artist_id AND".
		" song1.album_id = song2.album_id AND".
		" song2.track > song1.track AND".
		" song2.present ORDER BY song2.track");
	$sth->execute;
	while($_ = $sth->fetchrow_hashref) {
		if(!$idsq{$_->{id}}) {
			add_song($dbh, $table, $user, $_->{id})
				or warn "can't add song.\n";
			return $_;
		}
	}
}

%iso_639_2 = (
	'aar' => 'Afar',
	'abk' => 'Abkhazian',
	'ace' => 'Achinese',
	'ach' => 'Acoli',
	'ada' => 'Adangme',
	'afa' => 'Afro-Asiatic',
	'afh' => 'Afrihili',
	'afr' => 'Afrikaans',
	'aka' => 'Akan',
	'akk' => 'Akkadian',
	'alb' => 'Albanian',
	'ale' => 'Aleut',
	'alg' => 'Algonquian Languages',
	'amh' => 'Amharic',
	'ang' => 'English, Old',
	'apa' => 'Apache Languages',
	'ara' => 'Arabic',
	'arc' => 'Aramaic',
	'arm' => 'Armenian',
	'arn' => 'Araucanian',
	'arp' => 'Arapaho',
	'art' => 'Artificial',
	'arw' => 'Arawak',
	'asm' => 'Assamese',
	'ath' => 'Athapascan Languages',
	'ava' => 'Avaric',
	'ave' => 'Avestan',
	'awa' => 'Awadhi',
	'aym' => 'Aymara',
	'aze' => 'Azerbaijani',
	'bad' => 'Banda',
	'bai' => 'Bamileke Languages',
	'bak' => 'Bashkir',
	'bal' => 'Baluchi',
	'bam' => 'Bambara',
	'ban' => 'Balinese',
	'baq' => 'Basque',
	'bas' => 'Basa',
	'bat' => 'Baltic',
	'bej' => 'Beja',
	'bel' => 'Byelorussian',
	'bem' => 'Bemba',
	'ben' => 'Bengali',
	'ber' => 'Berber',
	'bho' => 'Bhojpuri',
	'bih' => 'Bihari',
	'bik' => 'Bikol',
	'bin' => 'Bini',
	'bis' => 'Bislama',
	'bla' => 'Siksika',
	'bnt' => 'Bantu',
	'bod' => 'Tibetan',
	'bra' => 'Braj',
	'bre' => 'Breton',
	'bua' => 'Buriat',
	'bug' => 'Buginese',
	'bul' => 'Bulgarian',
	'bur' => 'Burmese',
	'cad' => 'Caddo',
	'cai' => 'Central American Indian',
	'car' => 'Carib',
	'cat' => 'Catalan',
	'cau' => 'Caucasian',
	'ceb' => 'Cebuano',
	'cel' => 'Celtic',
	'ces' => 'Czech',
	'cha' => 'Chamorro',
	'chb' => 'Chibcha',
	'che' => 'Chechen',
	'chg' => 'Chagatai',
	'chi' => 'Chinese',
	'chm' => 'Mari',
	'chn' => 'Chinook jargon',
	'cho' => 'Choctaw',
	'chr' => 'Cherokee',
	'chu' => 'Church Slavic',
	'chv' => 'Chuvash',
	'chy' => 'Cheyenne',
	'cop' => 'Coptic',
	'cor' => 'Cornish',
	'cos' => 'Corsican',
	'cpe' => 'Creoles and Pidgins, English-based',
	'cpf' => 'Creoles and Pidgins, French-based',
	'cpp' => 'Creoles and Pidgins, Portuguese-based',
	'cre' => 'Cree',
	'crp' => 'Creoles and Pidgins',
	'cus' => 'Cushitic',
	'cym' => 'Welsh',
	'cze' => 'Czech',
	'dak' => 'Dakota',
	'dan' => 'Danish',
	'del' => 'Delaware',
	'deu' => 'German',
	'din' => 'Dinka',
	'div' => 'Divehi',
	'doi' => 'Dogri',
	'dra' => 'Dravidian',
	'dua' => 'Duala',
	'dum' => 'Dutch, Middle',
	'dut' => 'Dutch',
	'dyu' => 'Dyula',
	'dzo' => 'Dzongkha',
	'efi' => 'Efik',
	'egy' => 'Egyptian (Ancient)',
	'eka' => 'Ekajuk',
	'ell' => 'Greek, Modern',
	'elx' => 'Elamite',
	'eng' => 'English',
	'enm' => 'English, Middle',
	'epo' => 'Esperanto',
	'esk' => 'Eskimo',
	'esl' => 'Spanish',
	'est' => 'Estonian',
	'eus' => 'Basque',
	'ewe' => 'Ewe',
	'ewo' => 'Ewondo',
	'fan' => 'Fang',
	'fao' => 'Faroese',
	'fas' => 'Persian',
	'fat' => 'Fanti',
	'fij' => 'Fijian',
	'fin' => 'Finnish',
	'fiu' => 'Finno-Ugrian',
	'fon' => 'Fon',
	'fra' => 'French',
	'fre' => 'French',
	'frm' => 'French, Middle',
	'fro' => 'French, Old',
	'fry' => 'Frisian',
	'ful' => 'Fulah',
	'gaa' => 'Ga',
	'gae' => 'Gaelic (Scots)',
	'gai' => 'Irish',
	'gay' => 'Gayo',
	'gdh' => 'Gaelic (Scots)',
	'gem' => 'Germanic',
	'geo' => 'Georgian',
	'ger' => 'German',
	'gez' => 'Geez',
	'gil' => 'Gilbertese',
	'glg' => 'Gallegan',
	'gmh' => 'German, Middle High',
	'goh' => 'German, Old High',
	'gon' => 'Gondi',
	'got' => 'Gothic',
	'grb' => 'Grebo',
	'grc' => 'Greek, Ancient',
	'gre' => 'Greek, Modern',
	'grn' => 'Guarani',
	'guj' => 'Gujarati',
	'hai' => 'Haida',
	'hau' => 'Hausa',
	'haw' => 'Hawaiian',
	'heb' => 'Hebrew',
	'her' => 'Herero',
	'hil' => 'Hiligaynon',
	'him' => 'Himachali',
	'hin' => 'Hindi',
	'hmo' => 'Hiri Motu',
	'hun' => 'Hungarian',
	'hup' => 'Hupa',
	'hye' => 'Armenian',
	'iba' => 'Iban',
	'ibo' => 'Igbo',
	'ice' => 'Icelandic',
	'ijo' => 'Ijo',
	'iku' => 'Inuktitut',
	'ilo' => 'Iloko',
	'ina' => 'Interlingua',
	'inc' => 'Indic',
	'ind' => 'Indonesian',
	'ine' => 'Indo-European',
	'ine' => 'Interlingue',
	'ipk' => 'Inupiak',
	'ira' => 'Iranian',
	'iri' => 'Irish',
	'iro' => 'Iroquoian uages',
	'isl' => 'Icelandic',
	'ita' => 'Italian',
	'jav' => 'Javanese',
	'jaw' => 'Javanese',
	'jpn' => 'Japanese',
	'jpr' => 'Judeo-Persian',
	'jrb' => 'Judeo-Arabic',
	'kaa' => 'Kara-Kalpak',
	'kab' => 'Kabyle',
	'kac' => 'Kachin',
	'kal' => 'Greenlandic',
	'kam' => 'Kamba',
	'kan' => 'Kannada',
	'kar' => 'Karen',
	'kas' => 'Kashmiri',
	'kat' => 'Georgian',
	'kau' => 'Kanuri',
	'kaw' => 'Kawi',
	'kaz' => 'Kazakh',
	'kha' => 'Khasi',
	'khi' => 'Khoisan',
	'khm' => 'Khmer',
	'kho' => 'Khotanese',
	'kik' => 'Kikuyu',
	'kin' => 'Kinyarwanda',
	'kir' => 'Kirghiz',
	'kok' => 'Konkani',
	'kom' => 'Komi',
	'kon' => 'Kongo',
	'kor' => 'Korean',
	'kpe' => 'Kpelle',
	'kro' => 'Kru',
	'kru' => 'Kurukh',
	'kua' => 'Kuanyama',
	'kum' => 'Kumyk',
	'kur' => 'Kurdish',
	'kus' => 'Kusaie',
	'kut' => 'Kutenai',
	'lad' => 'Ladino',
	'lah' => 'Lahnda',
	'lam' => 'Lamba',
	'lao' => 'Lao',
	'lat' => 'Latin',
	'lav' => 'Latvian',
	'lez' => 'Lezghian',
	'lin' => 'Lingala',
	'lit' => 'Lithuanian',
	'lol' => 'Mongo',
	'loz' => 'Lozi',
	'ltz' => 'Letzeburgesch',
	'lub' => 'Luba-Katanga',
	'lug' => 'Ganda',
	'lui' => 'Luiseno',
	'lun' => 'Lunda',
	'luo' => 'Luo (Kenya and Tanzania)',
	'mac' => 'Macedonian',
	'mad' => 'Madurese',
	'mag' => 'Magahi',
	'mah' => 'Marshall',
	'mai' => 'Maithili',
	'mak' => 'Macedonian',
	'mak' => 'Makasar',
	'mal' => 'Malayalam',
	'man' => 'Mandingo',
	'mao' => 'Maori',
	'map' => 'Austronesian',
	'mar' => 'Marathi',
	'mas' => 'Masai',
	'max' => 'Manx',
	'may' => 'Malay',
	'men' => 'Mende',
	'mga' => 'Irish, Middle',
	'mic' => 'Micmac',
	'min' => 'Minangkabau',
	'mis' => 'Miscellaneous',
	'mkh' => 'Mon-Kmer',
	'mlg' => 'Malagasy',
	'mlt' => 'Maltese',
	'mni' => 'Manipuri',
	'mno' => 'Manobo Languages',
	'moh' => 'Mohawk',
	'mol' => 'Moldavian',
	'mon' => 'Mongolian',
	'mos' => 'Mossi',
	'mri' => 'Maori',
	'msa' => 'Malay',
	'mul' => 'Multiple Languages',
	'mun' => 'Munda Languages',
	'mus' => 'Creek',
	'mwr' => 'Marwari',
	'mya' => 'Burmese',
	'myn' => 'Mayan Languages',
	'nah' => 'Aztec',
	'nai' => 'North American Indian',
	'nau' => 'Nauru',
	'nav' => 'Navajo',
	'nbl' => 'Ndebele, South',
	'nde' => 'Ndebele, North',
	'ndo' => 'Ndongo',
	'nep' => 'Nepali',
	'new' => 'Newari',
	'nic' => 'Niger-Kordofanian',
	'niu' => 'Niuean',
	'nla' => 'Dutch',
	'nno' => 'Norwegian (Nynorsk)',
	'non' => 'Norse, Old',
	'nor' => 'Norwegian',
	'nso' => 'Sotho, Northern',
	'nub' => 'Nubian Languages',
	'nya' => 'Nyanja',
	'nym' => 'Nyamwezi',
	'nyn' => 'Nyankole',
	'nyo' => 'Nyoro',
	'nzi' => 'Nzima',
	'oci' => 'Langue d\'Oc',
	'oji' => 'Ojibwa',
	'ori' => 'Oriya',
	'orm' => 'Oromo',
	'osa' => 'Osage',
	'oss' => 'Ossetic',
	'ota' => 'Turkish, Ottoman',
	'oto' => 'Otomian Languages',
	'paa' => 'Papuan-Australian',
	'pag' => 'Pangasinan',
	'pal' => 'Pahlavi',
	'pam' => 'Pampanga',
	'pan' => 'Panjabi',
	'pap' => 'Papiamento',
	'pau' => 'Palauan',
	'peo' => 'Persian, Old',
	'per' => 'Persian',
	'phn' => 'Phoenician',
	'pli' => 'Pali',
	'pol' => 'Polish',
	'pon' => 'Ponape',
	'por' => 'Portuguese',
	'pra' => 'Prakrit uages',
	'pro' => 'Provencal, Old',
	'pus' => 'Pushto',
	'que' => 'Quechua',
	'raj' => 'Rajasthani',
	'rar' => 'Rarotongan',
	'roa' => 'Romance',
	'roh' => 'Rhaeto-Romance',
	'rom' => 'Romany',
	'ron' => 'Romanian',
	'rum' => 'Romanian',
	'run' => 'Rundi',
	'rus' => 'Russian',
	'sad' => 'Sandawe',
	'sag' => 'Sango',
	'sah' => 'Yakut',
	'sai' => 'South American Indian',
	'sal' => 'Salishan Languages',
	'sam' => 'Samaritan Aramaic',
	'san' => 'Sanskrit',
	'sco' => 'Scots',
	'scr' => 'Serbo-Croatian',
	'sel' => 'Selkup',
	'sem' => 'Semitic',
	'sga' => 'Irish, Old',
	'shn' => 'Shan',
	'sid' => 'Sidamo',
	'sin' => 'Singhalese',
	'sio' => 'Siouan Languages',
	'sit' => 'Sino-Tibetan',
	'sla' => 'Slavic',
	'slk' => 'Slovak',
	'slo' => 'Slovak',
	'slv' => 'Slovenian',
	'smi' => 'Sami Languages',
	'smo' => 'Samoan',
	'sna' => 'Shona',
	'snd' => 'Sindhi',
	'sog' => 'Sogdian',
	'som' => 'Somali',
	'son' => 'Songhai',
	'sot' => 'Sotho, Southern',
	'spa' => 'Spanish',
	'sqi' => 'Albanian',
	'srd' => 'Sardinian',
	'srr' => 'Serer',
	'ssa' => 'Nilo-Saharan',
	'ssw' => 'Siswant',
	'ssw' => 'Swazi',
	'suk' => 'Sukuma',
	'sun' => 'Sudanese',
	'sus' => 'Susu',
	'sux' => 'Sumerian',
	'sve' => 'Swedish',
	'swa' => 'Swahili',
	'swe' => 'Swedish',
	'syr' => 'Syriac',
	'tah' => 'Tahitian',
	'tam' => 'Tamil',
	'tat' => 'Tatar',
	'tel' => 'Telugu',
	'tem' => 'Timne',
	'ter' => 'Tereno',
	'tgk' => 'Tajik',
	'tgl' => 'Tagalog',
	'tha' => 'Thai',
	'tib' => 'Tibetan',
	'tig' => 'Tigre',
	'tir' => 'Tigrinya',
	'tiv' => 'Tivi',
	'tli' => 'Tlingit',
	'tmh' => 'Tamashek',
	'tog' => 'Tonga (Nyasa)',
	'ton' => 'Tonga (Tonga Islands)',
	'tru' => 'Truk',
	'tsi' => 'Tsimshian',
	'tsn' => 'Tswana',
	'tso' => 'Tsonga',
	'tuk' => 'Turkmen',
	'tum' => 'Tumbuka',
	'tur' => 'Turkish',
	'tut' => 'Altaic',
	'twi' => 'Twi',
	'tyv' => 'Tuvinian',
	'uga' => 'Ugaritic',
	'uig' => 'Uighur',
	'ukr' => 'Ukrainian',
	'umb' => 'Umbundu',
	'und' => 'Undetermined',
	'urd' => 'Urdu',
	'uzb' => 'Uzbek',
	'vai' => 'Vai',
	'ven' => 'Venda',
	'vie' => 'Vietnamese',
	'vol' => 'Volapu:k',
	'vot' => 'Votic',
	'wak' => 'Wakashan Languages',
	'wal' => 'Walamo',
	'war' => 'Waray',
	'was' => 'Washo',
	'wel' => 'Welsh',
	'wen' => 'Sorbian Languages',
	'wol' => 'Wolof',
	'xho' => 'Xhosa',
	'yao' => 'Yao',
	'yap' => 'Yap',
	'yid' => 'Yiddish',
	'yor' => 'Yoruba',
	'zap' => 'Zapotec',
	'zen' => 'Zenaga',
	'zha' => 'Zhuang',
	'zho' => 'Chinese',
	'zul' => 'Zulu',
	'zun' => 'Zuni',
);

1;
