
# $Id$

sub del_song($$) {
	my $sth = $_[0]->prepare("DELETE FROM queue WHERE song_id=?");
	$sth->execute($_[1]);
}

sub add_song($$) {
	$_[0]->do("LOCK TABLES queue WRITE");
	del_song($_[0], $_[1]);
	my ($max) = $_[0]->selectrow_array("SELECT MAX(song_order) FROM queue");
	my $sth = $_[0]->prepare("INSERT INTO queue (song_order,song_id) VALUES (?,?)");
	$sth->execute($max + 1, $_[1]);
	$_[0]->do("UNLOCK TABLES");
}

sub move_song_to_top($$) {
	$_[0]->do("LOCK TABLES queue WRITE");
	del_song($_[0], $_[1]);
	$_[0]->do("UPDATE queue SET song_order = song_order + 1");
	my $sth = $_[0]->prepare("INSERT INTO queue (song_order,song_id) VALUES (0,?)");
	$sth->execute($_[1]);
	$_[0]->do("UNLOCK TABLES");
}


sub kill_song() {
	local *F;

	open F, $statusfile
		or die "$statusfile: $!\n";
	<F>; <F>; <F>; <F>;
	chop($host = <F>);
	$port = <F>;
	close F;

	use Socket;

	socket(F, PF_INET, SOCK_STREAM, getprotobyname('tcp'))
		or die "socket: $!\n";
	connect(F, sockaddr_in($port, inet_aton($host)))
		or die "connect $host:$port: $!\n";
	read F, $_, 1;	# will get end-of-file
	close F;
}

# returns (samplefreq, channels, seconds)
sub get_wav_params($;$) {
	my ($file, $offset) = @_;
	$offset = 0 + $offset;
	local *F;
	my $buf;
	my @res;

	open F, $file or return undef;
	FILE: for(;;) {
		read(F, $buf, $offset) or last;
		read(F, $buf, 12)  or last;
		my ($riff, $len, $wave) = unpack("a4Va4", $buf);
		last if $riff ne 'RIFF' || $wave ne 'WAVE';

		# find 'fmt ' chunk
		for(;;) {
			read(F, $buf, 8) or last FILE;
			my ($type, $len) = unpack("a4V", $buf);
			last if $type eq 'fmt ';
			while($len) {
				my $r = $len < 4096? $len : 4096;
				$r = read F, $buf, $r or last FILE;
				$len -= $r;
			}
		}
		read(F, $buf, 16)  or last;
		my ($fmt, $chan, $freq, $bytespersec, $align, $bitspersample) =
			unpack("vvVVvv", $buf);
		last if $fmt != 1;

		# find 'data' chunk
		for(;;) {
			read(F, $buf, 8)  or last FILE;
			my ($type, $len) = unpack("a4V", $buf);
			last if $type eq 'data';
			while($len) {
				my $r = $len < 4096? $len : 4096;
				$r = read F, $buf, $r or last FILE;
				$len -= $r;
			}
		}

		push @res, $freq, $chan, int($len / $bytespersec + 0.5);
		last;
	}
	close F;
	return @res;
}

1;
