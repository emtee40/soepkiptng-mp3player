#!/usr/bin/perl
############################################################################
# soepkiptng (c) copyright 2000 Eric Lammerts <eric@lammerts.org>.
# $Id$

############################################################################
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2, as 
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

############################################################################

# $Id$

use Cwd 'abs_path';
use CGI qw/-nph/;
use DBI;
use Getopt::Std;
use HTTP::Daemon;
use HTTP::Status;
use IO::Socket;
use LWP::UserAgent;
use Socket;

# find program directory
$_ = $0;
while(-l) {
	my $l = readlink or die "readlink $_: $!\n";
	if($l =~ m|^/|) { $_ = $l; } else { s|[^/]*$|/$l|; }
}
m|(.*)/|;
my $progdir = abs_path($1);

require "$progdir/soepkiptng.lib";
require "$progdir/soepkiptng_web.lib";

my $cgiquery;

############################################################################
# SUBROUTINES

sub printhttphdr() {
	print $cgiquery->header(-type=>"text/html; charset=ISO-8859-15");
}

sub require_write_access() {
return; #FIXME
	if($conf{write_access_func} &&
		!eval $conf{write_access_func}) {

		printhtmlhdr;
		printhdr($conf{allstyle});
		print "<b>Access Denied.</b>\n";
		printftr;
		exit;
	}
}

sub run_instance() {
	local $lifetime = $opt_l || $conf{httpd_lifetime} || 100;
	local $conn;

	$SIG{HUP} = sub {
		if(defined($conn)) {
			# busy, exit after finishing current request
			$lifetime = 0;
		} else {
			warn "\n=====pid$$ SIGHUP caught, exiting\n";
			exit 0;
		}
	};

	my $dbh = DBI->connect("DBI:$conf{db_type}:$conf{db_name}:$conf{db_host}",
	        $conf{db_user}, $conf{db_pass}) or die "can't connect to database";

	my $i;
	for($i = 0; $i < $lifetime; $i++) {
		$conn = $daemon->accept or die "accept: $!\n";
		my $r = $conn->get_request or next;
		warn "\n=====pid$$->$i===== r->uri=[" . $r->uri . "]===\n";
		my $content;
		if($r->method eq "GET") {
			($content = $r->uri) =~ s/.*?\?//;
		} elsif($r->method eq "POST") {
			$content = $r->content;
		} else {
			die "invalid request\n";
		}

		$cgiquery = new CGI($content);

		my $req;
		$req->{dbh} = $dbh;
		$req->{cgiquery} = $cgiquery;
		$req->{self} = "/";
		$req->{host} = inet_ntoa($conn->peeraddr);

		open STDOUT, ">&=" . $conn->fileno;
		handle_request($req);
		close STDOUT;

		$conn = undef;
	}
	warn "$i connections served, exiting.\n";
}


############################################################################
# MAIN

getopts('dhp:i:l:c:');

$opt_h and die <<EOF;

Usage: soepkiptng_httpd [-dh] [-p port] [-i servers] [-l maxrequests]

Options:
 -d             : don't daemonize, log to stdout/stderr.
 -h             : get this help
 -p port        : port to listen on
 -i servers     : number of child processes the parent process will spawn
 -l maxrequests : the number of requests each child process is allowed to
                  process before it dies (to avoid problems like memory leaks
                  after prolonged use)

EOF

read_configfile(\%conf, $opt_c);

my $port = $opt_p || $conf{httpd_port} || 80;
$daemon = new HTTP::Daemon(LocalPort => $port, ReuseAddr => 1)
	or die "port $port: $!\n";

if(!$opt_d) {
	fork && exit;
	setpgrp;
	chdir "/";
	open STDIN, "</dev/null";
	if(defined($conf{httpd_errfile})) {
		rename $conf{httpd_errfile}, "$conf{httpd_errfile}.old";
		open STDOUT, ">$conf{httpd_errfile}";
	} else {
		open STDOUT, ">/dev/null";
	}
	open STDERR, ">&STDOUT";
}

local %pids;

$SIG{HUP} = sub {
	$reread = 1;
	kill 1, keys %pids;
};

$SIG{USR1} = sub {
	warn "master: killing -9 all children\n";
	kill 9, keys %pids;
	$doexec = 1;
};

my $httpd_instances = $opt_i || $conf{httpd_instances} || 2;
warn "master starting, pid=$$\n";
for(;;) {
	my $pid;

	if($doexec) {
		warn "master $$: exec self [$0]\n";
		exec $0, @ARGV;
		warn "master $$: exec self: $!\n";
	}
	if($reread) {
		%conf = undef;
		warn "master: rereading configfile\n";
		read_configfile(\%conf, $opt_c);
		$reread = 0;
	}
		
	while(keys %pids < $httpd_instances) {
		if(($pid = fork) == 0) {
			%pids = ();
			run_instance();
			exit 0;
		}
		next if !defined($pid);
		warn "forked child, pid=$pid\n";
		$pids{$pid} = 1;
	}
	my $pid = wait;
	delete $pids{$pid};
	if($?) { sleep 1; } # rate-limit failing children
}
